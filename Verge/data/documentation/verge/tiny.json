{"primaryContentSections":[{"kind":"content","content":[{"anchor":"To-keep-performance-and-scalability","level":2,"type":"heading","text":"To keep performance and scalability"},{"anchor":"Adding-a-cachable-computed-property-in-a-State","level":2,"type":"heading","text":"Adding a cachable computed property in a State"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can add a computed property in a state to get a derived value with stored property,"},{"type":"text","text":" "},{"type":"text","text":"and that computed property works fine as well other stored property."}]},{"type":"codeListing","syntax":"swift","code":["struct MyState {","  var items: [Item] = [] {","","  var itemsCount: Int {","    items.count","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this patterns might cause an expensive cost of operation depends on how they computes."},{"type":"text","text":" "},{"type":"text","text":"To solve it, Verge arrows us to define the computed property with another approach."}]},{"type":"codeListing","syntax":"swift","code":["struct MyState: ExtendedStateType {","","  var name: String = ...","  var items: [Int] = []","","  struct Extended: ExtendedType {","    let filteredArray = Field.Computed<[Int]> {","      $0.items.filter { $0 > 300 }","    }","    .ifChanged(selector: \\.largeArray)","  }","}"]},{"type":"codeListing","syntax":"swift","code":["let store: MyStore","","store.changes.computed.filteredArray"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This defined computed array calculates only if changed specified value."},{"type":"text","text":" "},{"type":"text","text":"That condition to re-calculate is defined with "},{"type":"codeVoice","code":".ifChanged"},{"type":"text","text":" method in the example code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, it caches the result by first-time access and it returns cached value until if the source value changed."}]},{"anchor":"Making-a-slice-of-the-state-Selector","level":2,"type":"heading","text":"Making a slice of the state (Selector)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can create a slice object that derives a data from the state."}]},{"type":"codeListing","syntax":"swift","code":["let derived: Derived<Int> = store.derived(.map(\\.count))","","\/\/ take a value","derived.value","","\/\/ subscribe a value changes","derived.sinkChanges { (changes: Changes<Int>) in","}"]},{"anchor":"Creating-a-Dispatcher","level":2,"type":"heading","text":"Creating a Dispatcher"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Store arrows us to define an action in itself, that might cause gain complexity in supporting a large application."},{"type":"text","text":" "},{"type":"text","text":"To solve this, Verge offers us to create an object that dispatches an action to the store."},{"type":"text","text":" "},{"type":"text","text":"We can separate the code of actions to keep maintainability."},{"type":"text","text":" "},{"type":"text","text":"that also help us to manage a different type of dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the case of those dependencies different between logged-in and logged-out."}]},{"type":"codeListing","syntax":"swift","code":["class MyDispatcher: MyStore.Dispatcher {","  func moreOperation() {","    commit {","      ...","    }","  }","}"]},{"type":"codeListing","syntax":"swift","code":["let store: MyStore","let dispatcher = MyDispatcher(target: store)","","dispatcher.moreOperation()"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/verge\/tiny"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Verge\/documentation\/Verge\/Tiny","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Yet another super tiny store pattern with Verge\/Tiny","role":"article","modules":[{"name":"Verge"}]},"hierarchy":{"paths":[["doc:\/\/Verge\/documentation\/Verge"]]},"references":{"doc://Verge/documentation/Verge":{"role":"collection","title":"Verge","abstract":[],"identifier":"doc:\/\/Verge\/documentation\/Verge","kind":"symbol","type":"topic","url":"\/documentation\/verge"}}}