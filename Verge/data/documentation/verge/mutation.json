{"primaryContentSections":[{"kind":"content","content":[{"anchor":"What-Mutation-is","level":2,"type":"heading","text":"What Mutation is"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only way to actually change state in a Store is by committing a mutation. Define a function that returns Mutation object. That expresses that function is Mutation"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutation does "},{"type":"strong","inlineContent":[{"type":"text","text":"NOT"}]},{"type":"text","text":" allow to run asynchronous operation."}]},{"anchor":"Define-mutations-in-the-Store","level":3,"type":"heading","text":"Define mutations in the Store"},{"type":"codeListing","syntax":"swift","code":["struct MyState {","  var todos: [TODO] = []","}","","class MyStore: Store<MyState, Never> {","","  func addNewTodo(title: String) {","    commit { (state: inout InoutRef<MyState>) in","      state.todos.append(Todo(title: title, hasCompleted: false))","    }","  }","","}"]},{"anchor":"Run-Mutation","level":3,"type":"heading","text":"Run Mutation"},{"type":"codeListing","syntax":"swift","code":["let store = MyStore()","store.addNewTodo(title: \"Create SwiftUI App\")","","print(store.state.todos)","\/\/ store.state.todos => [Todo(title: \"Create SwiftUI App\", hasCompleted: false)]"]},{"anchor":"Batches-multiple-commtis","level":2,"type":"heading","text":"Batches multiple commtis"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Committing multiple mutations in a short time might decrease performance."},{"type":"text","text":" "},{"type":"text","text":"Because the subscribers around the store derive a state many times."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like this,"}]},{"type":"codeListing","syntax":"swift","code":["class MyStore: Store<MyState, Never> {","","  func myMutation() {","    if ... {","      commit {","        ...","      }","      \/\/ emits updated event","    }","","    if ... {","      commit {","        ...","      }","      \/\/ emits updated event","    }","","    if ... {","      commit {","        ...","      }","      \/\/ emits updated event","    }","  }","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To keep better performance, we need to keep using fewer commits in a short time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have 2 ways."}]},{"anchor":"Using-commit","level":3,"type":"heading","text":"Using `commit`"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"DispatcherType\/commit(_:_:_:_:mutation:)"},{"type":"text","text":" provides "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Verge\/documentation\/Verge\/InoutRef"},{"type":"text","text":", that can detect how the wrapped state will change."},{"type":"text","text":" "},{"type":"text","text":"If there is no change, "},{"type":"codeVoice","code":"commit"},{"type":"text","text":" does nothing and no emitting the events from the Store."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, you should attention "},{"type":"codeVoice","code":"commit"},{"type":"text","text":" is atomically operation which means, the Store getting lock while committing."}]},{"type":"codeListing","syntax":"swift","code":["func myMutation() {","  commit { (state: inout InoutRef<State>) in","    if ... {","      state.aaa = ...","    }","","    if ... {","      state.bbb = ...","    }","","    if ... {","      state.ccc = ...","    }","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/verge\/mutation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Verge\/documentation\/Verge\/Mutation","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Mutation","role":"article","modules":[{"name":"Verge"}]},"hierarchy":{"paths":[["doc:\/\/Verge\/documentation\/Verge"]]},"references":{"doc://Verge/documentation/Verge":{"role":"collection","title":"Verge","abstract":[],"identifier":"doc:\/\/Verge\/documentation\/Verge","kind":"symbol","type":"topic","url":"\/documentation\/verge"},"doc://Verge/documentation/Verge/InoutRef":{"role":"symbol","title":"InoutRef","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"InoutRef"}],"abstract":[{"type":"text","text":"A reference object that manages a reference of the value type instance in order to achieve the followings:"}],"identifier":"doc:\/\/Verge\/documentation\/Verge\/InoutRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InoutRef"}],"url":"\/documentation\/verge\/inoutref"}}}