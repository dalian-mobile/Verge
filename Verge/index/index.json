{"interfaceLanguages":{"swift":[{"children":[{"title":"Guides","type":"groupMarker"},{"path":"\/documentation\/verge\/motivation","title":"Motivation","type":"article"},{"path":"\/documentation\/verge\/basic-usage","title":"Basic Usage","type":"article"},{"path":"\/documentation\/verge\/advanced-usage","title":"Advanced Usage","type":"article"},{"title":"Extras","type":"groupMarker"},{"path":"\/documentation\/verge\/tiny","title":"Yet another super tiny store pattern with Verge\/Tiny","type":"article"},{"title":"Migrations","type":"groupMarker"},{"path":"\/documentation\/verge\/migration-guide-v9","title":"Changes in v9","type":"article"},{"title":"Essentials","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/init(name:initialstate:backingstoragerecursivelock:logger:_:_:)","title":"convenience init(name: String?, initialState: State, backingStorageRecursiveLock: VergeAnyRecursiveLock?, logger: StoreLogger?, StaticString, UInt)","type":"init"},{"path":"\/documentation\/verge\/store\/init(name:initialstate:backingstoragerecursivelock:logger:sanitizer:_:_:)","title":"init(name: String?, initialState: State, backingStorageRecursiveLock: VergeAnyRecursiveLock?, logger: StoreLogger?, sanitizer: RuntimeSanitizer?, StaticString, UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/activitypublisher","title":"var activityPublisher: EventEmitter<Activity>.Publisher","type":"property"},{"path":"\/documentation\/verge\/store\/changes","title":"var changes: Changes<State>","type":"property"},{"path":"\/documentation\/verge\/store\/custommirror","title":"var customMirror: Mirror","type":"property"},{"path":"\/documentation\/verge\/store\/logger","title":"let logger: StoreLogger?","type":"property"},{"path":"\/documentation\/verge\/store\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"},{"path":"\/documentation\/verge\/store\/primitivestate","title":"var primitiveState: State","type":"property"},{"path":"\/documentation\/verge\/store\/sanitizer","title":"let sanitizer: RuntimeSanitizer","type":"property"},{"path":"\/documentation\/verge\/store\/scope-swift.property-6h2d9","title":"var scope: WritableKeyPath<State, State>","type":"property"},{"path":"\/documentation\/verge\/store\/state","title":"var state: Changes<State>","type":"property"},{"path":"\/documentation\/verge\/store\/store","title":"var store: Store<State, Activity>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/add(middleware:)","title":"func add(middleware: StoreMiddleware<State>)","type":"method"},{"path":"\/documentation\/verge\/store\/asstore()","title":"func asStore() -> Store<State, Activity>","type":"method"},{"path":"\/documentation\/verge\/store\/changespublisher(startsfrominitial:)","title":"func changesPublisher(startsFromInitial: Bool) -> AnyPublisher<Changes<Store<State, Activity>.Value>, Never>","type":"method"},{"path":"\/documentation\/verge\/store\/sinkactivity(queue:receive:)-95vdr","title":"func sinkActivity(queue: MainActorTargetQueue, receive: (Activity) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkactivity(queue:receive:)-9tbga","title":"func sinkActivity(queue: TargetQueue, receive: (Activity) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(dropsfirst:queue:receive:)-3bkwh","title":"func sinkState(dropsFirst: Bool, queue: TargetQueue, receive: (Changes<State>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(dropsfirst:queue:receive:)-4opdr","title":"func sinkState(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<State>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(scan:dropsfirst:queue:receive:)-8gn98","title":"func sinkState<Accumulate>(scan: Scan<Changes<State>, Accumulate>, dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<State>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(scan:dropsfirst:queue:receive:)-9bxvp","title":"func sinkState<Accumulate>(scan: Scan<Changes<State>, Accumulate>, dropsFirst: Bool, queue: TargetQueue, receive: (Changes<State>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/statepublisher(startsfrominitial:)","title":"func statePublisher(startsFromInitial: Bool) -> AnyPublisher<Changes<Store<State, Activity>.Value>, Never>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/dispatcher","title":"Store.Dispatcher","type":"typealias"},{"path":"\/documentation\/verge\/store\/scope-swift.typealias","title":"Store.Scope","type":"typealias"},{"path":"\/documentation\/verge\/store\/scopeddispatcher","title":"Store.ScopedDispatcher","type":"typealias"},{"path":"\/documentation\/verge\/store\/value","title":"Store.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/scope-swift.property-3irj8","title":"var scope: WritableKeyPath<Self.Scope, Self.Scope>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/commit(_:_:_:_:mutation:)-4891f","title":"func commit<Result>(String, StaticString, StaticString, UInt, mutation: (inout InoutRef<Self.Scope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/store\/commit(_:_:_:_:mutation:)-6x3ad","title":"func commit<Result>(String, StaticString, StaticString, UInt, mutation: (inout InoutRef<Self.Scope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/store\/commit(_:_:_:_:scope:mutation:)-95nx7","title":"func commit<Result, NewScope>(String, StaticString, StaticString, UInt, scope: WritableKeyPath<Self.WrappedStore.State, NewScope?>, mutation: (inout InoutRef<NewScope>?) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/store\/commit(_:_:_:_:scope:mutation:)-9fqcr","title":"func commit<Result, NewScope>(String, StaticString, StaticString, UInt, scope: WritableKeyPath<Self.WrappedStore.State, NewScope>, mutation: (inout InoutRef<NewScope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/store\/detached(by:)","title":"func detached<NewScope>(by: WritableKeyPath<Self.Scope, NewScope>) -> DetachedDispatcher<Self.WrappedStore.State, Self.WrappedStore.Activity, NewScope>","type":"method"},{"path":"\/documentation\/verge\/store\/detached(from:)","title":"func detached<NewScope>(from: WritableKeyPath<Self.WrappedStore.State, NewScope>) -> DetachedDispatcher<Self.WrappedStore.State, Self.WrappedStore.Activity, NewScope>","type":"method"},{"path":"\/documentation\/verge\/store\/send(_:_:_:_:)","title":"func send(Self.WrappedStore.Activity, StaticString, StaticString, UInt)","type":"method"},{"path":"\/documentation\/verge\/store\/send(_:_:_:_:_:)","title":"func send(String, Self.WrappedStore.Activity, StaticString, StaticString, UInt)","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(dropsfirst:queue:receive:)-3tuam","title":"func sinkState(dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.Scope>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(dropsfirst:queue:receive:)-3yjam","title":"func sinkState(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.Scope>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(scan:dropsfirst:queue:receive:)-25cyf","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.Scope>, Accumulate>, dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.Scope>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/sinkstate(scan:dropsfirst:queue:receive:)-45qh1","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.Scope>, Accumulate>, dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.Scope>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"}],"path":"\/documentation\/verge\/store\/dispatchertype-implementations","title":"DispatcherType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/assign(to:)","title":"func assign(to: (Changes<Self.State>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:)-2d1sj","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Changes<Value?>>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:)-3nlxq","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:)-5hu75","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Value?>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:)-6p1sz","title":"func assignee<Value>(WritableKeyPath<Self.State, Value>) -> Self.Assignee<Value>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:)-7n58d","title":"func assignee<Value>(WritableKeyPath<Self.State, Value>) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:)-8vtxp","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Value>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:dropsoutput:)-16q5m","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>, dropsOutput: (Changes<Value?>) -> Bool) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:dropsoutput:)-2ouqp","title":"func assignee<Value>(WritableKeyPath<Self.State, Value>, dropsOutput: (Changes<Value>) -> Bool) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/store\/assignee(_:dropsoutput:)-3b196","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>, dropsOutput: (Changes<Value?>) -> Bool) -> Self.Assignee<Changes<Value?>>","type":"method"},{"path":"\/documentation\/verge\/store\/binding(_:with:)","title":"func binding<T>(WritableKeyPath<Self.State, T>, with: ((T) -> Void)?) -> Binding<T>","type":"method"},{"path":"\/documentation\/verge\/store\/bindingderived(_:_:_:_:get:set:queue:)","title":"func bindingDerived<Pipeline>(String, StaticString, StaticString, UInt, get: Pipeline, set: (inout InoutRef<Self.State>, Pipeline.Output) -> Void, queue: TargetQueueType) -> BindingDerived<Pipeline.Output>","type":"method"},{"path":"\/documentation\/verge\/store\/derived(_:queue:)","title":"func derived<Pipeline>(Pipeline, queue: TargetQueueType) -> Derived<Pipeline.Output>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/store\/assignee","title":"Store.Assignee","type":"typealias"}],"path":"\/documentation\/verge\/store\/storetype-implementations","title":"StoreType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/store","title":"Store","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/computedproxy\/subscript(dynamicmember:)","title":"subscript<Output>(dynamicMember _: KeyPath<Value.Extended, _StateTypeContainer<Value>.Computed<Output>>) -> Output","type":"subscript"}],"path":"\/documentation\/verge\/changes\/computedproxy","title":"Changes.ComputedProxy","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/==(_:_:)","title":"static func == (Changes<Value>, Changes<Value>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/init(old:new:)","title":"convenience init(old: Value?, new: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/computed","title":"var computed: Changes<Value>.ComputedProxy","type":"property"},{"path":"\/documentation\/verge\/changes\/current","title":"var current: Value","type":"property"},{"path":"\/documentation\/verge\/changes\/haschanges","title":"var hasChanges: Bool","type":"property"},{"path":"\/documentation\/verge\/changes\/modification","title":"let modification: InoutRef<Value>.Modification?","type":"property"},{"path":"\/documentation\/verge\/changes\/old","title":"var old: Value?","type":"property"},{"path":"\/documentation\/verge\/changes\/previous","title":"let previous: Changes<Value>?","type":"property"},{"path":"\/documentation\/verge\/changes\/previousprimitive","title":"var previousPrimitive: Value?","type":"property"},{"path":"\/documentation\/verge\/changes\/primitive","title":"var primitive: Value","type":"property"},{"path":"\/documentation\/verge\/changes\/root","title":"var root: Value","type":"property"},{"path":"\/documentation\/verge\/changes\/traces","title":"let traces: [MutationTrace]","type":"property"},{"path":"\/documentation\/verge\/changes\/version","title":"var version: UInt64","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/aschanges()","title":"func asChanges() -> Changes<Value>","type":"method"},{"path":"\/documentation\/verge\/changes\/droppedprevious()","title":"func droppedPrevious() -> Changes<Value>","type":"method"},{"path":"\/documentation\/verge\/changes\/haschanges(_:)-85hqm","title":"func hasChanges<Composed>((Changes<Value>) -> Composed) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/haschanges(_:)-9lnbw","title":"func hasChanges<T>(Changes<Value>.ChangesKeyPath<T>) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/haschanges(_:_:)-2tgh9","title":"func hasChanges<T>(Changes<Value>.ChangesKeyPath<T>, Comparer<T>) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/haschanges(_:_:)-9rp64","title":"func hasChanges<Composed>((Changes<Value>) -> Composed, Comparer<Composed>) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:)","title":"func ifChanged((Value) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:)-5uwik","title":"func ifChanged<Composed, Result>((Changes<Value>) -> Composed, (Composed) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:)-8bpn8","title":"func ifChanged<T, Result>(Changes<Value>.ChangesKeyPath<T>, (T) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:_:)-1a59d","title":"func ifChanged<T, Result>(Changes<Value>.ChangesKeyPath<T>, Comparer<T>, (T) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:_:)-1j9it","title":"func ifChanged<Composed, Result>((Changes<Value>) -> Composed, Comparer<Composed>, (Composed) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:_:)-4da31","title":"func ifChanged<T0, T1, Result>(Changes<Value>.ChangesKeyPath<T0>, Changes<Value>.ChangesKeyPath<T1>, ((T0, T1)) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:_:_:)","title":"func ifChanged<T0, T1, T2, Result>(Changes<Value>.ChangesKeyPath<T0>, Changes<Value>.ChangesKeyPath<T1>, Changes<Value>.ChangesKeyPath<T2>, ((T0, T1, T2)) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:_:_:_:)","title":"func ifChanged<T0, T1, T2, T3, Result>(Changes<Value>.ChangesKeyPath<T0>, Changes<Value>.ChangesKeyPath<T1>, Changes<Value>.ChangesKeyPath<T2>, Changes<Value>.ChangesKeyPath<T3>, ((T0, T1, T2, T3)) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/ifchanged(_:_:_:_:_:_:)","title":"func ifChanged<T0, T1, T2, T3, T4, Result>(Changes<Value>.ChangesKeyPath<T0>, Changes<Value>.ChangesKeyPath<T1>, Changes<Value>.ChangesKeyPath<T2>, Changes<Value>.ChangesKeyPath<T3>, Changes<Value>.ChangesKeyPath<T4>, ((T0, T1, T2, T3, T4)) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/verge\/changes\/makenextchanges(with:from:modification:)","title":"func makeNextChanges(with: Value, from: [MutationTrace], modification: InoutRef<Value>.Modification) -> Changes<Value>","type":"method"},{"path":"\/documentation\/verge\/changes\/map(_:)-43z9b","title":"func map<U>((Value) throws -> U) rethrows -> Changes<U>","type":"method"},{"path":"\/documentation\/verge\/changes\/mapifpresent(_:)","title":"func mapIfPresent<U>(KeyPath<Value, U?>) -> Changes<U>?","type":"method"},{"path":"\/documentation\/verge\/changes\/nochanges(_:)","title":"func noChanges<T>(Changes<Value>.ChangesKeyPath<T>) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/nochanges(_:_:)","title":"func noChanges<T>(Changes<Value>.ChangesKeyPath<T>, Comparer<T>) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/takeifchanged(_:)","title":"func takeIfChanged<Composed>((Changes<Value>) throws -> Composed) rethrows -> Composed?","type":"method"},{"path":"\/documentation\/verge\/changes\/takeifchanged(_:_:)","title":"func takeIfChanged<Composed>((Changes<Value>) throws -> Composed, Comparer<Composed>) rethrows -> Composed?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/subscript(dynamicmember:)","title":"subscript<T>(dynamicMember _: KeyPath<Value, T>) -> T","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/changeskeypath","title":"Changes.ChangesKeyPath","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/verge\/changes\/distance(from:to:)-1hnbl","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/verge\/changes\/droplast(_:)-i8td","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/verge\/changes\/index(_:offsetby:)-3igg9","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/verge\/changes\/index(_:offsetby:limitedby:)-8n1e6","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/verge\/changes\/index(before:)-hxtx","title":"func index(before: Value.Index) -> Value.Index","type":"method"},{"path":"\/documentation\/verge\/changes\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verge\/changes\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/verge\/changes\/reversed()-6lnu0","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/verge\/changes\/suffix(_:)-3pszj","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/verge\/changes\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/verge\/changes\/endindex","title":"var endIndex: Value.Index","type":"property"},{"path":"\/documentation\/verge\/changes\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/verge\/changes\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/verge\/changes\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/verge\/changes\/startindex","title":"var startIndex: Value.Index","type":"property"},{"path":"\/documentation\/verge\/changes\/underestimatedcount-72cg1","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/cachedcompactmap(using:makenew:)","title":"func cachedCompactMap<U>(using: CachedMapStorage<Self.Element, U>, makeNew: (Self.Element) throws -> U?) rethrows -> [U]","type":"method"},{"path":"\/documentation\/verge\/changes\/cachedconcurrentmap(using:makenew:)","title":"func cachedConcurrentMap<U>(using: CachedMapStorage<Self.Element, U>, makeNew: (Self.Element) throws -> U) -> ConcurrentMapResult<U>","type":"method"},{"path":"\/documentation\/verge\/changes\/cachedmap(using:makenew:update:)","title":"func cachedMap<U>(using: CachedMapStorage<Self.Element, U>, makeNew: (Self.Element) throws -> U, update: (Self.Element, inout U) -> Void) rethrows -> [U]","type":"method"},{"path":"\/documentation\/verge\/changes\/distance(from:to:)-83lzh","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/verge\/changes\/drop(while:)-lgj0","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/dropfirst(_:)-99uy8","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/droplast(_:)-595x0","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/verge\/changes\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/verge\/changes\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/verge\/changes\/index(_:offsetby:)-8icuu","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/verge\/changes\/index(_:offsetby:limitedby:)-9upyr","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/verge\/changes\/index(after:)","title":"func index(after: Value.Index) -> Value.Index","type":"method"},{"path":"\/documentation\/verge\/changes\/map(_:)-904r5","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/verge\/changes\/prefix(_:)-15x24","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/prefix(while:)-lbmh","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/verge\/changes\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/verge\/changes\/split(maxsplits:omittingemptysubsequences:whereseparator:)-5x6c7","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/verge\/changes\/suffix(_:)-bhm0","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/verge\/changes\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/subscript(_:)-12w5r","title":"subscript(Value.Index) -> Value.Element","type":"subscript"},{"path":"\/documentation\/verge\/changes\/subscript(_:)-351u9","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/verge\/changes\/subscript(_:)-554kj","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/verge\/changes\/subscript(_:)-8mnkj","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/index","title":"Changes.Index","type":"typealias"}],"path":"\/documentation\/verge\/changes\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/verge\/changes\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/changes\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/index(_:offsetby:limitedby:)-454ae","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/verge\/changes\/index(before:)-504mh","title":"func index(before: Value.Index) -> Value.Index","type":"method"}],"path":"\/documentation\/verge\/changes\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/verge\/changes\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/verge\/changes\/underestimatedcount-8qjtv","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/verge\/changes\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/verge\/changes\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/drop(while:)-8gxtj","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/verge\/changes\/dropfirst(_:)-1dlgc","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/verge\/changes\/droplast(_:)-2vro2","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/verge\/changes\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verge\/changes\/flatmap(_:)-1wfke","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/flatmap(_:)-33mv0","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/verge\/changes\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/verge\/changes\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/verge\/changes\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/makeiterator()","title":"func makeIterator() -> Value.Iterator","type":"method"},{"path":"\/documentation\/verge\/changes\/map(_:)-6knut","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/verge\/changes\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verge\/changes\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verge\/changes\/prefix(_:)-3unyp","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/verge\/changes\/prefix(while:)-23qpk","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/changes\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/changes\/reversed()-8me0y","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/sorted(using:)-2aqnz","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/sorted(using:)-73utk","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/split(maxsplits:omittingemptysubsequences:whereseparator:)-5iwmi","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/verge\/changes\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verge\/changes\/suffix(_:)-67xin","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verge\/changes\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/changes\/element","title":"Changes.Element","type":"typealias"},{"path":"\/documentation\/verge\/changes\/iterator","title":"Changes.Iterator","type":"typealias"}],"path":"\/documentation\/verge\/changes\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/verge\/changes","title":"Changes","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/init(get:set:initialupstreamstate:subscribeupstreamstate:retainsupstream:)-1q3le","title":"init<UpstreamState, Pipeline>(get: Pipeline, set: ((Pipeline.Output) -> Void)?, initialUpstreamState: UpstreamState, subscribeUpstreamState: ((UpstreamState) -> Void) -> CancellableType, retainsUpstream: Any?)","type":"init"},{"path":"\/documentation\/verge\/derived\/init(get:set:initialupstreamstate:subscribeupstreamstate:retainsupstream:)-50ync","title":"init<UpstreamState, Pipeline>(get: Pipeline, set: ((Pipeline.Output) -> Void)?, initialUpstreamState: UpstreamState, subscribeUpstreamState: ((UpstreamState) -> Void) -> CancellableType, retainsUpstream: Any?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/changes","title":"var changes: Changes<Value>","type":"property"},{"path":"\/documentation\/verge\/derived\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"},{"path":"\/documentation\/verge\/derived\/primitivevalue","title":"var primitiveValue: Value","type":"property"},{"path":"\/documentation\/verge\/derived\/value","title":"var value: Changes<Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/asderived()","title":"func asDerived() -> Derived<Value>","type":"method"},{"path":"\/documentation\/verge\/derived\/assign(to:)","title":"func assign(to: (Changes<Value>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/associate(_:)","title":"func associate(AnyObject)","type":"method"},{"path":"\/documentation\/verge\/derived\/chain(_:queue:)","title":"func chain<Pipeline>(Pipeline, queue: TargetQueueType) -> Derived<Pipeline.Output>","type":"method"},{"path":"\/documentation\/verge\/derived\/changespublisher(startsfrominitial:)","title":"func changesPublisher(startsFromInitial: Bool) -> AnyPublisher<Changes<Value>, Never>","type":"method"},{"path":"\/documentation\/verge\/derived\/sinkchangedprimitivevalue(dropsfirst:queue:receive:)-6v7fg","title":"func sinkChangedPrimitiveValue(dropsFirst: Bool, queue: TargetQueue, receive: (Value) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/sinkchangedprimitivevalue(dropsfirst:queue:receive:)-rsi8","title":"func sinkChangedPrimitiveValue(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Value) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/sinkvalue(dropsfirst:queue:receive:)-41lbw","title":"func sinkValue(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Value>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/sinkvalue(dropsfirst:queue:receive:)-6bhz","title":"func sinkValue(dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Value>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/sinkvalue(scan:dropsfirst:queue:receive:)-7a6xe","title":"func sinkValue<Accumulate>(scan: Scan<Changes<Value>, Accumulate>, dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Value>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/sinkvalue(scan:dropsfirst:queue:receive:)-8dey3","title":"func sinkValue<Accumulate>(scan: Scan<Changes<Value>, Accumulate>, dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Value>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/derived\/valuepublisher(startsfrominitial:)","title":"func valuePublisher(startsFromInitial: Bool) -> AnyPublisher<Changes<Value>, Never>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/combined(_:_:_:queue:)","title":"static func combined<S0, S1, S2>(Derived<S0>, Derived<S1>, Derived<S2>, queue: TargetQueueType) -> Derived<Edge<(Changes<S0>, Changes<S1>, Changes<S2>)>>","type":"method"},{"path":"\/documentation\/verge\/derived\/combined(_:_:queue:)","title":"static func combined<S0, S1>(Derived<S0>, Derived<S1>, queue: TargetQueueType) -> Derived<Edge<(Changes<S0>, Changes<S1>)>>","type":"method"},{"path":"\/documentation\/verge\/derived\/constant(_:)","title":"static func constant(Value) -> Derived<Value>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/verge\/derived\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/verge\/derived\/==(_:_:)","title":"static func == (Derived<Value>, Derived<Value>) -> Bool","type":"op"}],"path":"\/documentation\/verge\/derived\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/derived\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/verge\/derived\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/derived","title":"Derived","type":"class"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/dispatchertype\/scope-swift.associatedtype","title":"Scope","type":"associatedtype"},{"path":"\/documentation\/verge\/dispatchertype\/wrappedstore","title":"WrappedStore","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/verge\/dispatchertype\/scope-swift.property-70sdh","title":"var scope: WritableKeyPath<Self.Scope, Self.Scope>","type":"property"}],"title":"DispatcherType Implementations","type":"groupMarker"}],"path":"\/documentation\/verge\/dispatchertype\/scope-swift.property-8u70x","title":"var scope: WritableKeyPath<Self.WrappedStore.State, Self.Scope>","type":"property"},{"path":"\/documentation\/verge\/dispatchertype\/store","title":"var store: Self.WrappedStore","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/dispatchertype\/commit(_:_:_:_:mutation:)-3sbna","title":"func commit<Result>(String, StaticString, StaticString, UInt, mutation: (inout InoutRef<Self.Scope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/commit(_:_:_:_:mutation:)-8pfyi","title":"func commit<Result>(String, StaticString, StaticString, UInt, mutation: (inout InoutRef<Self.Scope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/commit(_:_:_:_:scope:mutation:)-2oxqx","title":"func commit<Result, NewScope>(String, StaticString, StaticString, UInt, scope: WritableKeyPath<Self.WrappedStore.State, NewScope?>, mutation: (inout InoutRef<NewScope>?) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/commit(_:_:_:_:scope:mutation:)-6jzed","title":"func commit<Result, NewScope>(String, StaticString, StaticString, UInt, scope: WritableKeyPath<Self.WrappedStore.State, NewScope>, mutation: (inout InoutRef<NewScope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/detached(by:)","title":"func detached<NewScope>(by: WritableKeyPath<Self.Scope, NewScope>) -> DetachedDispatcher<Self.WrappedStore.State, Self.WrappedStore.Activity, NewScope>","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/detached(from:)","title":"func detached<NewScope>(from: WritableKeyPath<Self.WrappedStore.State, NewScope>) -> DetachedDispatcher<Self.WrappedStore.State, Self.WrappedStore.Activity, NewScope>","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/send(_:_:_:_:)","title":"func send(Self.WrappedStore.Activity, StaticString, StaticString, UInt)","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/send(_:_:_:_:_:)","title":"func send(String, Self.WrappedStore.Activity, StaticString, StaticString, UInt)","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/sinkstate(dropsfirst:queue:receive:)-44wn3","title":"func sinkState(dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.Scope>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/sinkstate(dropsfirst:queue:receive:)-x64i","title":"func sinkState(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.Scope>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/sinkstate(scan:dropsfirst:queue:receive:)-401gx","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.Scope>, Accumulate>, dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.Scope>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/dispatchertype\/sinkstate(scan:dropsfirst:queue:receive:)-5gfwt","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.Scope>, Accumulate>, dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.Scope>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"}],"path":"\/documentation\/verge\/dispatchertype","title":"DispatcherType","type":"protocol"},{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/verge\/activity","title":"Activity","type":"article"},{"path":"\/documentation\/verge\/computedproperty","title":"Computed Property","type":"article"},{"path":"\/documentation\/verge\/mutation","title":"Mutation","type":"article"},{"path":"\/documentation\/verge\/state","title":"Thinking in single state tree (Not enforced)","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/anonymousstoremiddleware\/init(mutate:)","title":"init(mutate: (inout InoutRef<State>) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/anonymousstoremiddleware\/mutate(state:)","title":"func mutate(state: inout InoutRef<State>)","type":"method"}],"path":"\/documentation\/verge\/anonymousstoremiddleware","title":"AnonymousStoreMiddleware","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/bindingderived\/primitivevalue","title":"var primitiveValue: Value","type":"property"},{"path":"\/documentation\/verge\/bindingderived\/projectedvalue","title":"var projectedValue: BindingDerived<Value>","type":"property"},{"path":"\/documentation\/verge\/bindingderived\/wrappedvalue","title":"var wrappedValue: Value","type":"property"}],"path":"\/documentation\/verge\/bindingderived","title":"BindingDerived","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/cachedmapstorage\/init(keyselector:shouldupdate:)","title":"init<Key>(keySelector: (Source) -> Key, shouldUpdate: (Source, Source) -> Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/cachedmapstorage\/compactmap(from:makenew:)","title":"func compactMap<C>(from: C, makeNew: (C.Element) throws -> Target?) rethrows -> [Target]","type":"method"},{"path":"\/documentation\/verge\/cachedmapstorage\/concurrentmap(from:makenew:)","title":"func concurrentMap<C>(from: C, makeNew: (C.Element) throws -> Target) -> ConcurrentMapResult<Target>","type":"method"},{"path":"\/documentation\/verge\/cachedmapstorage\/map(from:makenew:update:)","title":"func map<C>(from: C, makeNew: (C.Element) throws -> Target, update: (C.Element, inout Target) -> Void) rethrows -> [Target]","type":"method"},{"path":"\/documentation\/verge\/cachedmapstorage\/purgecache()","title":"func purgeCache()","type":"method"}],"path":"\/documentation\/verge\/cachedmapstorage","title":"CachedMapStorage","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/defaultstorelogger\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/defaultstorelogger\/activitylog","title":"let activityLog: OSLog","type":"property"},{"path":"\/documentation\/verge\/defaultstorelogger\/commitlog","title":"let commitLog: OSLog","type":"property"},{"path":"\/documentation\/verge\/defaultstorelogger\/dispatchercreationlog","title":"let dispatcherCreationLog: OSLog","type":"property"},{"path":"\/documentation\/verge\/defaultstorelogger\/dispatcherdestructionlog","title":"let dispatcherDestructionLog: OSLog","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/defaultstorelogger\/didcommit(log:sender:)","title":"func didCommit(log: CommitLog, sender: AnyObject)","type":"method"},{"path":"\/documentation\/verge\/defaultstorelogger\/didcreatedispatcher(log:sender:)","title":"func didCreateDispatcher(log: DidCreateDispatcherLog, sender: AnyObject)","type":"method"},{"path":"\/documentation\/verge\/defaultstorelogger\/diddestroydispatcher(log:sender:)","title":"func didDestroyDispatcher(log: DidDestroyDispatcherLog, sender: AnyObject)","type":"method"},{"path":"\/documentation\/verge\/defaultstorelogger\/didsendactivity(log:sender:)","title":"func didSendActivity(log: ActivityLog, sender: AnyObject)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/defaultstorelogger\/shared","title":"static let shared: DefaultStoreLogger","type":"property"}],"path":"\/documentation\/verge\/defaultstorelogger","title":"DefaultStoreLogger","type":"class"},{"path":"\/documentation\/verge\/detacheddispatcher","title":"DetachedDispatcher","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/dispatcherbase\/init(targetstore:)","title":"init(targetStore: Store<State, Activity>)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/dispatcherbase\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/verge\/dispatcherbase\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/verge\/dispatcherbase","title":"DispatcherBase","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/init(eventemitter:)","title":"init(eventEmitter: EventEmitter<Event>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/failure","title":"EventEmitter.Publisher.Failure","type":"typealias"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/output","title":"EventEmitter.Publisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/values-7m31v","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/values-7xqq9","title":"var values: AsyncPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/combinelatest(_:_:)-12osd","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/combinelatest(_:_:)-97ms2","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/combinelatest(_:_:_:)-3phkc","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/combinelatest(_:_:_:)-pw3s","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/flatmap(maxpublishers:_:)-6biv9","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/flatmap(maxpublishers:_:)-8gx6n","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/flatmap(maxpublishers:_:)-9df0l","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/flatmap(maxpublishers:_:)-ez4b","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/map(_:)-2gxut","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/map(_:)-3rzd7","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/max()","title":"func max() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/min()","title":"func min() -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/subscribe(_:)-29f79","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/subscribe(_:)-9lpcg","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/switchtolatest()","title":"func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/zip(_:_:)-5lssh","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/zip(_:_:)-6j2gl","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/zip(_:_:_:)-32kld","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/zip(_:_:_:)-o7la","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/verge\/eventemitter\/publisher-swift.struct","title":"EventEmitter.Publisher","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/subscription\/combineidentifier-5bv47","title":"let combineIdentifier: CombineIdentifier","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/subscription\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/subscription\/request(_:)","title":"func request(Subscribers.Demand)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/subscription\/store(in:)","title":"func store(in: inout Set<AnyCancellable>)","type":"method"}],"path":"\/documentation\/verge\/eventemitter\/subscription\/cancellable-implementations","title":"Cancellable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/subscription\/combineidentifier-53ypk","title":"var combineIdentifier: CombineIdentifier","type":"property"}],"path":"\/documentation\/verge\/eventemitter\/subscription\/customcombineidentifierconvertible-implementations","title":"CustomCombineIdentifierConvertible Implementations","type":"symbol"}],"path":"\/documentation\/verge\/eventemitter\/subscription","title":"EventEmitter.Subscription","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/publisher-swift.property","title":"var publisher: EventEmitter<Event>.Publisher","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemitter\/accept(_:)","title":"func accept(Event)","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/add(_:)","title":"func add((Event) -> Void) -> EventEmitterCancellable","type":"method"},{"path":"\/documentation\/verge\/eventemitter\/ondeinit(_:)","title":"func onDeinit(() -> Void)","type":"method"}],"path":"\/documentation\/verge\/eventemitter","title":"EventEmitter","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemittercancellable\/==(_:_:)","title":"static func == (EventEmitterCancellable, EventEmitterCancellable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemittercancellable\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/verge\/eventemittercancellable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemittercancellable\/asautocancellable()","title":"func asAutoCancellable() -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/eventemittercancellable\/store(in:)-1i99l","title":"func store(in: inout Set<VergeAnyCancellable>)","type":"method"},{"path":"\/documentation\/verge\/eventemittercancellable\/store(in:)-7rlcu","title":"func store(in: inout Set<AnyCancellable>)","type":"method"},{"path":"\/documentation\/verge\/eventemittercancellable\/store(in:)-7x3jj","title":"func store<C>(in: inout C)","type":"method"}],"path":"\/documentation\/verge\/eventemittercancellable\/cancellabletype-implementations","title":"CancellableType Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/eventemittercancellable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/eventemittercancellable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/eventemittercancellable","title":"EventEmitterCancellable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/init(_:)","title":"init(UnsafeMutablePointer<Wrapped>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.property","title":"var modification: InoutRef<Wrapped>.Modification?","type":"property"},{"path":"\/documentation\/verge\/inoutref\/traces","title":"var traces: [MutationTrace]","type":"property"},{"path":"\/documentation\/verge\/inoutref\/wrapped","title":"var wrapped: Wrapped","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/hasmodified(_:)","title":"func hasModified<U>(KeyPath<Wrapped, U>) -> Bool","type":"method"},{"path":"\/documentation\/verge\/inoutref\/map(keypath:perform:)-3q2u6","title":"func map<U, Result>(keyPath: WritableKeyPath<Wrapped, U?>, perform: (inout InoutRef<U>?) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/inoutref\/map(keypath:perform:)-9tane","title":"func map<U, Result>(keyPath: WritableKeyPath<Wrapped, U>, perform: (inout InoutRef<U>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/inoutref\/markasmodified()","title":"func markAsModified()","type":"method"},{"path":"\/documentation\/verge\/inoutref\/modify(_:)","title":"func modify<Return>((inout Wrapped) throws -> Return) rethrows -> Return","type":"method"},{"path":"\/documentation\/verge\/inoutref\/modifydirectly(_:)","title":"func modifyDirectly<Return>((inout Wrapped) throws -> Return) rethrows -> Return","type":"method"},{"path":"\/documentation\/verge\/inoutref\/replace(with:)","title":"func replace(with: Wrapped)","type":"method"},{"path":"\/documentation\/verge\/inoutref\/withtype(_:)","title":"func withType<Return>((Wrapped.Type, InoutRef<Wrapped>) throws -> Return) rethrows -> Return","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/subscript(dynamicmember:)-282bt","title":"subscript<T>(dynamicMember _: WritableKeyPath<Wrapped, T>) -> T","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(dynamicmember:)-3b0xn","title":"subscript<T>(dynamicMember _: KeyPath<Wrapped, T>) -> T","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(dynamicmember:)-569uq","title":"subscript<T>(dynamicMember _: WritableKeyPath<Wrapped, T?>) -> T?","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(dynamicmember:)-8ckv7","title":"subscript<T>(dynamicMember _: KeyPath<Wrapped, T?>) -> T?","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(keypath:)-45n22","title":"subscript<T>(keyPath _: KeyPath<Wrapped, T>) -> T","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(keypath:)-482qv","title":"subscript<T>(keyPath _: WritableKeyPath<Wrapped, T?>) -> T?","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(keypath:)-96r35","title":"subscript<T>(keyPath _: WritableKeyPath<Wrapped, T>) -> T","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/subscript(keypath:)-9yrpe","title":"subscript<T>(keyPath _: KeyPath<Wrapped, T?>) -> T?","type":"subscript"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/determinate(keypaths:)","title":"case determinate(keyPaths: Set<PartialKeyPath<Wrapped>>)","type":"case"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/indeterminate","title":"case indeterminate","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/debugdescription","title":"var debugDescription: String","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/subscript(dynamicmember:)-3dkby","title":"subscript<T>(dynamicMember _: KeyPath<Wrapped, T>) -> Bool","type":"subscript"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/subscript(dynamicmember:)-6udg","title":"subscript<T>(dynamicMember _: KeyPath<Wrapped, T?>) -> Bool","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/inoutref\/modification-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/inoutref\/modification-swift.enum","title":"InoutRef.Modification","type":"enum"}],"path":"\/documentation\/verge\/inoutref","title":"InoutRef","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/mainactortargetqueue\/executor()","title":"func executor() -> (() -> Void) -> Void","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/mainactortargetqueue\/asyncmain","title":"static var asyncMain: MainActorTargetQueue","type":"property"},{"path":"\/documentation\/verge\/mainactortargetqueue\/main","title":"static var main: MainActorTargetQueue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/mainactortargetqueue\/mainisolated()","title":"static func mainIsolated() -> MainActorTargetQueue","type":"method"}],"path":"\/documentation\/verge\/mainactortargetqueue\/targetqueuetype-implementations","title":"TargetQueueType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/mainactortargetqueue","title":"MainActorTargetQueue","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/readref\/init(_:)","title":"init(UnsafePointer<Wrapped>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/readref\/wrapped","title":"var wrapped: Wrapped","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/readref\/subscript(dynamicmember:)-5johm","title":"subscript<T>(dynamicMember _: KeyPath<Wrapped, T>) -> T","type":"subscript"},{"path":"\/documentation\/verge\/readref\/subscript(dynamicmember:)-6a9tm","title":"subscript<T>(dynamicMember _: KeyPath<Wrapped, T?>) -> T?","type":"subscript"},{"path":"\/documentation\/verge\/readref\/subscript(keypath:)-3muz3","title":"subscript<T>(keyPath _: KeyPath<Wrapped, T?>) -> T?","type":"subscript"},{"path":"\/documentation\/verge\/readref\/subscript(keypath:)-yua4","title":"subscript<T>(keyPath _: KeyPath<Wrapped, T>) -> T","type":"subscript"}],"path":"\/documentation\/verge\/readref","title":"ReadRef","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/readonlystorage\/init(_:recursivelock:upstreams:)","title":"init<RecursiveLock>(Value, recursiveLock: RecursiveLock, upstreams: [AnyObject])","type":"init"},{"path":"\/documentation\/verge\/readonlystorage\/init(_:upstreams:)","title":"convenience init(Value, upstreams: [AnyObject])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/readonlystorage\/custommirror","title":"var customMirror: Mirror","type":"property"},{"path":"\/documentation\/verge\/readonlystorage\/objectdidchange","title":"var objectDidChange: AnyPublisher<Value, Never>","type":"property"},{"path":"\/documentation\/verge\/readonlystorage\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/verge\/readonlystorage\/valuepublisher","title":"var valuePublisher: AnyPublisher<Value, Never>","type":"property"},{"path":"\/documentation\/verge\/readonlystorage\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/readonlystorage\/lock()","title":"func lock()","type":"method"},{"path":"\/documentation\/verge\/readonlystorage\/map(filter:transform:)","title":"func map<U>(filter: (Value) -> Bool, transform: (Value) -> U) -> ReadonlyStorage<U>","type":"method"},{"path":"\/documentation\/verge\/readonlystorage\/sinkevent(subscriber:)","title":"func sinkEvent(subscriber: (ReadonlyStorage<Value>.Event) -> Void) -> EventEmitterCancellable","type":"method"},{"path":"\/documentation\/verge\/readonlystorage\/unlock()","title":"func unlock()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/readonlystorage\/event\/didupdate(_:)","title":"case didUpdate(Value)","type":"case"},{"path":"\/documentation\/verge\/readonlystorage\/event\/willdeinit","title":"case willDeinit","type":"case"},{"path":"\/documentation\/verge\/readonlystorage\/event\/willupdate","title":"case willUpdate","type":"case"}],"path":"\/documentation\/verge\/readonlystorage\/event","title":"ReadonlyStorage.Event","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/readonlystorage\/objectwillchange-7iqz7","title":"var objectWillChange: ObservableObjectPublisher","type":"property"},{"path":"\/documentation\/verge\/readonlystorage\/objectwillchange-9xren","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/verge\/readonlystorage\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/verge\/readonlystorage","title":"ReadonlyStorage","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/runtimesanitizer\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/runtimesanitizer\/isrecursivelycommitdetectionenabled","title":"var isRecursivelyCommitDetectionEnabled: Bool","type":"property"},{"path":"\/documentation\/verge\/runtimesanitizer\/issanitizerstatereceivingbycorrectorder","title":"var isSanitizerStateReceivingByCorrectOrder: Bool","type":"property"},{"path":"\/documentation\/verge\/runtimesanitizer\/ondidfindruntimeerror","title":"var onDidFindRuntimeError: (RuntimeError) -> Void","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/runtimesanitizer\/global","title":"static let global: RuntimeSanitizer","type":"property"}],"path":"\/documentation\/verge\/runtimesanitizer","title":"RuntimeSanitizer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/scan\/init(seed:accumulator:)","title":"init(seed: Accumulate, accumulator: Scan<Element, Accumulate>.Accumulator)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/scan\/value","title":"var value: Accumulate","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/scan\/accumulate(_:)","title":"func accumulate(Element) -> Accumulate","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/scan\/accumulator","title":"Scan.Accumulator","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/scan\/counter()","title":"static func counter() -> Scan<Element, Int>","type":"method"}],"path":"\/documentation\/verge\/scan","title":"Scan","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/init(name:targetstore:scope:_:_:)","title":"init(name: String?, targetStore: Store<State, Activity>, scope: WritableKeyPath<State, Scope>, StaticString, UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/rootstate","title":"var rootState: Changes<State>","type":"property"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/scope-2yjfu","title":"let scope: WritableKeyPath<State, Scope>","type":"property"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/state","title":"var state: Changes<Scope>","type":"property"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/store","title":"let store: Store<State, Activity>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/scope-3cjlz","title":"var scope: WritableKeyPath<Self.Scope, Self.Scope>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/commit(_:_:_:_:mutation:)-2dy40","title":"func commit<Result>(String, StaticString, StaticString, UInt, mutation: (inout InoutRef<Self.Scope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/commit(_:_:_:_:mutation:)-6fgop","title":"func commit<Result>(String, StaticString, StaticString, UInt, mutation: (inout InoutRef<Self.Scope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/commit(_:_:_:_:scope:mutation:)-4h33","title":"func commit<Result, NewScope>(String, StaticString, StaticString, UInt, scope: WritableKeyPath<Self.WrappedStore.State, NewScope>, mutation: (inout InoutRef<NewScope>) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/commit(_:_:_:_:scope:mutation:)-8lln3","title":"func commit<Result, NewScope>(String, StaticString, StaticString, UInt, scope: WritableKeyPath<Self.WrappedStore.State, NewScope?>, mutation: (inout InoutRef<NewScope>?) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/detached(by:)","title":"func detached<NewScope>(by: WritableKeyPath<Self.Scope, NewScope>) -> DetachedDispatcher<Self.WrappedStore.State, Self.WrappedStore.Activity, NewScope>","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/detached(from:)","title":"func detached<NewScope>(from: WritableKeyPath<Self.WrappedStore.State, NewScope>) -> DetachedDispatcher<Self.WrappedStore.State, Self.WrappedStore.Activity, NewScope>","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/send(_:_:_:_:)","title":"func send(Self.WrappedStore.Activity, StaticString, StaticString, UInt)","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/send(_:_:_:_:_:)","title":"func send(String, Self.WrappedStore.Activity, StaticString, StaticString, UInt)","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/sinkstate(dropsfirst:queue:receive:)-7gkt","title":"func sinkState(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.Scope>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/sinkstate(dropsfirst:queue:receive:)-90p39","title":"func sinkState(dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.Scope>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/sinkstate(scan:dropsfirst:queue:receive:)-42afo","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.Scope>, Accumulate>, dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.Scope>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/scopeddispatcherbase\/sinkstate(scan:dropsfirst:queue:receive:)-6ds4a","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.Scope>, Accumulate>, dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.Scope>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"}],"path":"\/documentation\/verge\/scopeddispatcherbase\/dispatchertype-implementations","title":"DispatcherType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/scopeddispatcherbase","title":"ScopedDispatcherBase","type":"class"},{"path":"\/documentation\/verge\/statestorage","title":"StateStorage","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/storage\/update(_:)","title":"func update<Result>((inout Value) throws -> Result) rethrows -> Result","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/storage\/updateresult\/nothingupdates","title":"case nothingUpdates","type":"case"},{"path":"\/documentation\/verge\/storage\/updateresult\/updated","title":"case updated","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/storage\/updateresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/storage\/updateresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/storage\/updateresult","title":"Storage.UpdateResult","type":"enum"}],"path":"\/documentation\/verge\/storage","title":"Storage","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/storemiddleware\/mutate(state:)","title":"func mutate(state: inout InoutRef<State>)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/storemiddleware\/unifiedmutation(_:)","title":"static func unifiedMutation((inout InoutRef<State>) -> Void) -> AnonymousStoreMiddleware<State>","type":"method"}],"path":"\/documentation\/verge\/storemiddleware","title":"StoreMiddleware","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/targetqueue\/executor()","title":"func executor() -> (() -> Void) -> Void","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/targetqueue\/asyncserialbackground","title":"static var asyncSerialBackground: TargetQueue","type":"property"},{"path":"\/documentation\/verge\/targetqueue\/passthrough","title":"static var passthrough: TargetQueue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/targetqueue\/specific(_:)","title":"static func specific(DispatchQueue) -> TargetQueue","type":"method"},{"path":"\/documentation\/verge\/targetqueue\/startsfromcurrentthread(anduse:)","title":"static func startsFromCurrentThread<Queue>(andUse: Queue) -> TargetQueue","type":"method"}],"path":"\/documentation\/verge\/targetqueue\/targetqueuetype-implementations","title":"TargetQueueType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/targetqueue","title":"TargetQueue","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/uistatestore\/init(initialstate:logger:)","title":"init(initialState: State, logger: StoreLogger?)","type":"init"}],"path":"\/documentation\/verge\/uistatestore","title":"UIStateStore","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanycancellable\/==(_:_:)","title":"static func == (VergeAnyCancellable, VergeAnyCancellable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanycancellable\/init(_:)-59tlk","title":"convenience init(CancellableType)","type":"init"},{"path":"\/documentation\/verge\/vergeanycancellable\/init(_:)-76bvp","title":"convenience init<C>(C)","type":"init"},{"path":"\/documentation\/verge\/vergeanycancellable\/init(ondeinit:)","title":"init(onDeinit: () -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanycancellable\/associate(_:)","title":"func associate(AnyObject) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/insert(_:)","title":"func insert(CancellableType)","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/insert(ondeinit:)","title":"func insert(onDeinit: () -> Void)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanycancellable\/asautocancellable()","title":"func asAutoCancellable() -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/store(in:)-5awkx","title":"func store<C>(in: inout C)","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/store(in:)-5eby1","title":"func store(in: inout Set<VergeAnyCancellable>)","type":"method"},{"path":"\/documentation\/verge\/vergeanycancellable\/store(in:)-cnto","title":"func store(in: inout Set<AnyCancellable>)","type":"method"}],"path":"\/documentation\/verge\/vergeanycancellable\/cancellabletype-implementations","title":"CancellableType Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanycancellable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/vergeanycancellable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/vergeanycancellable","title":"VergeAnyCancellable","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/anychangestype\/traces","title":"var traces: [MutationTrace]","type":"property"},{"path":"\/documentation\/verge\/anychangestype\/version","title":"var version: UInt64","type":"property"}],"path":"\/documentation\/verge\/anychangestype","title":"AnyChangesType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/cancellabletype\/asautocancellable()","title":"func asAutoCancellable() -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/cancellabletype\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/verge\/cancellabletype\/store(in:)-4nl9","title":"func store<C>(in: inout C)","type":"method"},{"path":"\/documentation\/verge\/cancellabletype\/store(in:)-5cfw","title":"func store(in: inout Set<AnyCancellable>)","type":"method"},{"path":"\/documentation\/verge\/cancellabletype\/store(in:)-65ipn","title":"func store(in: inout Set<VergeAnyCancellable>)","type":"method"}],"path":"\/documentation\/verge\/cancellabletype","title":"CancellableType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/changestype\/value","title":"Value","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/changestype\/modification","title":"var modification: InoutRef<Self.Value>.Modification?","type":"property"},{"path":"\/documentation\/verge\/changestype\/previous","title":"var previous: Self?","type":"property"},{"path":"\/documentation\/verge\/changestype\/previousprimitive","title":"var previousPrimitive: Self.Value?","type":"property"},{"path":"\/documentation\/verge\/changestype\/primitive","title":"var primitive: Self.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/changestype\/aschanges()","title":"func asChanges() -> Changes<Self.Value>","type":"method"}],"path":"\/documentation\/verge\/changestype","title":"ChangesType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/derivedtype\/value","title":"Value","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/derivedtype\/asderived()","title":"func asDerived() -> Derived<Self.Value>","type":"method"}],"path":"\/documentation\/verge\/derivedtype","title":"DerivedType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/edgetype\/state","title":"State","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/edgetype\/globalid","title":"var globalID: Int","type":"property"},{"path":"\/documentation\/verge\/edgetype\/version","title":"var version: UInt64","type":"property"},{"path":"\/documentation\/verge\/edgetype\/wrappedvalue","title":"var wrappedValue: Self.State","type":"property"}],"path":"\/documentation\/verge\/edgetype","title":"EdgeType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/extendedstatetype\/extended","title":"Extended","type":"associatedtype"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/extendedstatetype\/field","title":"ExtendedStateType.Field","type":"typealias"}],"path":"\/documentation\/verge\/extendedstatetype","title":"ExtendedStateType","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/extendedtype\/instance","title":"static var instance: Self","type":"property"}],"path":"\/documentation\/verge\/extendedtype","title":"ExtendedType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/hastraces\/traces","title":"var traces: [MutationTrace]","type":"property"}],"path":"\/documentation\/verge\/hastraces","title":"HasTraces","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelinetype\/input","title":"Input","type":"associatedtype"},{"path":"\/documentation\/verge\/pipelinetype\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelinetype\/yield(_:)","title":"func yield(Self.Input) -> Self.Output","type":"method"},{"path":"\/documentation\/verge\/pipelinetype\/yieldcontinuously(_:)","title":"func yieldContinuously(Self.Input) -> ContinuousResult<Self.Output>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelinetype\/map(_:)-1zrea","title":"static func map<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelinetype\/map(_:)-6k9fz","title":"static func map<Input, Output>((Changes<Input>) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelinetype\/map(using:)","title":"static func map<Input, EdgeIntermediate>(using: (Changes<Input>) -> PipelineIntermediate<Edge<EdgeIntermediate>>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelinetype\/map(using:transform:)","title":"static func map<Input, Intermediate, Output>(using: (Changes<Input>) -> PipelineIntermediate<Intermediate>, transform: (Intermediate) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelinetype\/select(_:)","title":"static func select<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"}],"path":"\/documentation\/verge\/pipelinetype","title":"PipelineType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/statetype\/update(target:update:)","title":"func update<T, Return>(target: WritableKeyPath<Self, T>, update: (inout T) throws -> Return) rethrows -> Return","type":"method"},{"path":"\/documentation\/verge\/statetype\/update(update:)","title":"func update<Return>(update: (inout Self) throws -> Return) rethrows -> Return","type":"method"},{"path":"\/documentation\/verge\/statetype\/updatetrypresent(target:update:)","title":"func updateTryPresent<T, Return>(target: WritableKeyPath<Self, T>, update: (inout T.Wrapped) throws -> Return) throws -> Return","type":"method"}],"path":"\/documentation\/verge\/statetype","title":"StateType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/storecomponenttype\/activity","title":"Activity","type":"associatedtype"},{"path":"\/documentation\/verge\/storecomponenttype\/scope","title":"Scope","type":"associatedtype"},{"path":"\/documentation\/verge\/storecomponenttype\/state-swift.associatedtype","title":"State","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/storecomponenttype\/activitypublisher","title":"var activityPublisher: EventEmitter<Self.Activity>.Publisher","type":"property"},{"path":"\/documentation\/verge\/storecomponenttype\/changes","title":"var changes: Changes<Self.WrappedStore.State>","type":"property"},{"path":"\/documentation\/verge\/storecomponenttype\/state-swift.property","title":"var state: Changes<Self.WrappedStore.State>","type":"property"},{"path":"\/documentation\/verge\/storecomponenttype\/store","title":"var store: Self.WrappedStore","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/storecomponenttype\/binding(_:with:)","title":"func binding<T>(WritableKeyPath<Self.WrappedStore.State, T>, with: ((T) -> Void)?) -> Binding<T>","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/changespublisher(startsfrominitial:)","title":"func changesPublisher(startsFromInitial: Bool) -> AnyPublisher<Changes<Self.State>, Never>","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/sinkactivity(queue:receive:)-95pys","title":"func sinkActivity(queue: TargetQueue, receive: (Self.WrappedStore.Activity) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/sinkactivity(queue:receive:)-qffe","title":"func sinkActivity(queue: MainActorTargetQueue, receive: (Self.WrappedStore.Activity) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/sinkstate(dropsfirst:queue:receive:)-3ed7e","title":"func sinkState(dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.WrappedStore.State>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/sinkstate(dropsfirst:queue:receive:)-4vrzy","title":"func sinkState(dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.WrappedStore.State>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/sinkstate(scan:dropsfirst:queue:receive:)-6dygh","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.WrappedStore.State>, Accumulate>, dropsFirst: Bool, queue: TargetQueue, receive: (Changes<Self.WrappedStore.State>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/sinkstate(scan:dropsfirst:queue:receive:)-9vbmo","title":"func sinkState<Accumulate>(scan: Scan<Changes<Self.WrappedStore.State>, Accumulate>, dropsFirst: Bool, queue: MainActorTargetQueue, receive: (Changes<Self.WrappedStore.State>, Accumulate) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storecomponenttype\/statepublisher(startsfrominitial:)","title":"func statePublisher(startsFromInitial: Bool) -> AnyPublisher<Changes<Self.State>, Never>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/storecomponenttype\/defaultstore","title":"StoreComponentType.DefaultStore","type":"typealias"}],"path":"\/documentation\/verge\/storecomponenttype","title":"StoreComponentType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/storelogger\/didcommit(log:sender:)","title":"func didCommit(log: CommitLog, sender: AnyObject)","type":"method"},{"path":"\/documentation\/verge\/storelogger\/didcreatedispatcher(log:sender:)","title":"func didCreateDispatcher(log: DidCreateDispatcherLog, sender: AnyObject)","type":"method"},{"path":"\/documentation\/verge\/storelogger\/diddestroydispatcher(log:sender:)","title":"func didDestroyDispatcher(log: DidDestroyDispatcherLog, sender: AnyObject)","type":"method"},{"path":"\/documentation\/verge\/storelogger\/didsendactivity(log:sender:)","title":"func didSendActivity(log: ActivityLog, sender: AnyObject)","type":"method"}],"path":"\/documentation\/verge\/storelogger","title":"StoreLogger","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/verge\/storetype\/activity","title":"Activity","type":"associatedtype"},{"path":"\/documentation\/verge\/storetype\/state","title":"State","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/verge\/storecomponenttype\/primitivestate","title":"var primitiveState: Self.WrappedStore.State","type":"property"}],"title":"StoreComponentType Implementations","type":"groupMarker"}],"path":"\/documentation\/verge\/storetype\/primitivestate","title":"var primitiveState: Self.State","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/verge\/storecomponenttype\/asstore()","title":"func asStore() -> Store<Self.State, Self.Activity>","type":"method"}],"title":"StoreComponentType Implementations","type":"groupMarker"}],"path":"\/documentation\/verge\/storetype\/asstore()","title":"func asStore() -> Store<Self.State, Self.Activity>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assign(to:)","title":"func assign(to: (Changes<Self.State>) -> Void) -> VergeAnyCancellable","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:)-394wh","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:)-3mf61","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Changes<Value?>>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:)-421hy","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Value>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:)-4zt4l","title":"func assignee<Value>(WritableKeyPath<Self.State, Value>) -> Self.Assignee<Value>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:)-6xu53","title":"func assignee<Value>(WritableKeyPath<Self.State, Value>) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:)-7jm1j","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>) -> Self.Assignee<Value?>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:dropsoutput:)-4javt","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>, dropsOutput: (Changes<Value?>) -> Bool) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:dropsoutput:)-5qqlx","title":"func assignee<Value>(WritableKeyPath<Self.State, Value?>, dropsOutput: (Changes<Value?>) -> Bool) -> Self.Assignee<Changes<Value?>>","type":"method"},{"path":"\/documentation\/verge\/storetype\/assignee(_:dropsoutput:)-fyuv","title":"func assignee<Value>(WritableKeyPath<Self.State, Value>, dropsOutput: (Changes<Value>) -> Bool) -> Self.Assignee<Changes<Value>>","type":"method"},{"path":"\/documentation\/verge\/storetype\/binding(_:with:)","title":"func binding<T>(WritableKeyPath<Self.State, T>, with: ((T) -> Void)?) -> Binding<T>","type":"method"},{"path":"\/documentation\/verge\/storetype\/bindingderived(_:_:_:_:get:set:queue:)","title":"func bindingDerived<Pipeline>(String, StaticString, StaticString, UInt, get: Pipeline, set: (inout InoutRef<Self.State>, Pipeline.Output) -> Void, queue: TargetQueueType) -> BindingDerived<Pipeline.Output>","type":"method"},{"path":"\/documentation\/verge\/storetype\/derived(_:queue:)","title":"func derived<Pipeline>(Pipeline, queue: TargetQueueType) -> Derived<Pipeline.Output>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/storetype\/assignee","title":"StoreType.Assignee","type":"typealias"}],"path":"\/documentation\/verge\/storetype","title":"StoreType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/targetqueuetype\/executor()","title":"func executor() -> (() -> Void) -> Void","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/targetqueuetype\/asyncmain","title":"static var asyncMain: MainActorTargetQueue","type":"property"},{"path":"\/documentation\/verge\/targetqueuetype\/asyncserialbackground","title":"static var asyncSerialBackground: TargetQueue","type":"property"},{"path":"\/documentation\/verge\/targetqueuetype\/main","title":"static var main: MainActorTargetQueue","type":"property"},{"path":"\/documentation\/verge\/targetqueuetype\/passthrough","title":"static var passthrough: TargetQueue","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/targetqueuetype\/mainisolated()","title":"static func mainIsolated() -> MainActorTargetQueue","type":"method"},{"path":"\/documentation\/verge\/targetqueuetype\/specific(_:)","title":"static func specific(DispatchQueue) -> TargetQueue","type":"method"},{"path":"\/documentation\/verge\/targetqueuetype\/startsfromcurrentthread(anduse:)","title":"static func startsFromCurrentThread<Queue>(andUse: Queue) -> TargetQueue","type":"method"}],"path":"\/documentation\/verge\/targetqueuetype","title":"TargetQueueType","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/activitylog\/init(storename:trace:)","title":"init(storeName: String, trace: ActivityTrace)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/activitylog\/store","title":"let store: String","type":"property"},{"path":"\/documentation\/verge\/activitylog\/trace","title":"let trace: ActivityTrace","type":"property"},{"path":"\/documentation\/verge\/activitylog\/type","title":"let type: String","type":"property"}],"path":"\/documentation\/verge\/activitylog","title":"ActivityLog","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/activitytrace\/createdat","title":"let createdAt: Date","type":"property"},{"path":"\/documentation\/verge\/activitytrace\/file","title":"let file: String","type":"property"},{"path":"\/documentation\/verge\/activitytrace\/function","title":"let function: String","type":"property"},{"path":"\/documentation\/verge\/activitytrace\/line","title":"let line: UInt","type":"property"},{"path":"\/documentation\/verge\/activitytrace\/name","title":"let name: String","type":"property"}],"path":"\/documentation\/verge\/activitytrace","title":"ActivityTrace","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/commitlog\/init(storename:traces:time:)","title":"init(storeName: String, traces: [MutationTrace], time: CFTimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/commitlog\/store","title":"let store: String","type":"property"},{"path":"\/documentation\/verge\/commitlog\/tookmilliseconds","title":"let tookMilliseconds: Double","type":"property"},{"path":"\/documentation\/verge\/commitlog\/traces","title":"let traces: [MutationTrace]","type":"property"},{"path":"\/documentation\/verge\/commitlog\/type","title":"let type: String","type":"property"}],"path":"\/documentation\/verge\/commitlog","title":"CommitLog","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/comparer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/verge\/comparer\/init(_:)","title":"init((Input, Input) -> Bool)","type":"init"},{"path":"\/documentation\/verge\/comparer\/init(and:)","title":"init(and: [Comparer<Input>])","type":"init"},{"path":"\/documentation\/verge\/comparer\/init(or:)","title":"init(or: [Comparer<Input>])","type":"init"},{"path":"\/documentation\/verge\/comparer\/init(selector:)","title":"init<T>(selector: (Input) -> T)","type":"init"},{"path":"\/documentation\/verge\/comparer\/init(selector:comparer:)","title":"init<T>(selector: (Input) -> T, comparer: Comparer<T>)","type":"init"},{"path":"\/documentation\/verge\/comparer\/init(selector:equals:)","title":"init<T>(selector: (Input) -> T, equals: (T, T) -> Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/comparer\/and(_:)","title":"func and(() -> Comparer<Input>) -> Comparer<Input>","type":"method"},{"path":"\/documentation\/verge\/comparer\/curried()","title":"func curried() -> (Input, Input) -> Bool","type":"method"},{"path":"\/documentation\/verge\/comparer\/debug(name:file:line:)","title":"func debug(name: String, file: StaticString, line: UInt) -> Comparer<Input>","type":"method"},{"path":"\/documentation\/verge\/comparer\/equals(_:_:)","title":"func equals(Input, Input) -> Bool","type":"method"},{"path":"\/documentation\/verge\/comparer\/or(_:)","title":"func or(() -> Comparer<Input>) -> Comparer<Input>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/comparer\/alwaysfalse","title":"static var alwaysFalse: Comparer<Input>","type":"property"},{"path":"\/documentation\/verge\/comparer\/usingequatable","title":"static var usingEquatable: Comparer<Input>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/comparer\/versionequals()","title":"static func versionEquals() -> Comparer<Input>","type":"method"}],"path":"\/documentation\/verge\/comparer","title":"Comparer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/concurrentmapresult\/init(elements:errors:)","title":"init(elements: [T], errors: [Error])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/concurrentmapresult\/elements","title":"var elements: [T]","type":"property"},{"path":"\/documentation\/verge\/concurrentmapresult\/errors","title":"var errors: [Error]","type":"property"},{"path":"\/documentation\/verge\/concurrentmapresult\/haserror","title":"var hasError: Bool","type":"property"}],"path":"\/documentation\/verge\/concurrentmapresult","title":"ConcurrentMapResult","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/didcreatedispatcherlog\/init(storename:dispatchername:)","title":"init(storeName: String, dispatcherName: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/didcreatedispatcherlog\/dispatcher","title":"let dispatcher: String","type":"property"},{"path":"\/documentation\/verge\/didcreatedispatcherlog\/store","title":"let store: String","type":"property"},{"path":"\/documentation\/verge\/didcreatedispatcherlog\/type","title":"let type: String","type":"property"}],"path":"\/documentation\/verge\/didcreatedispatcherlog","title":"DidCreateDispatcherLog","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/diddestroydispatcherlog\/init(storename:dispatchername:)","title":"init(storeName: String, dispatcherName: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/diddestroydispatcherlog\/dispatcher","title":"let dispatcher: String","type":"property"},{"path":"\/documentation\/verge\/diddestroydispatcherlog\/store","title":"let store: String","type":"property"},{"path":"\/documentation\/verge\/diddestroydispatcherlog\/type","title":"let type: String","type":"property"}],"path":"\/documentation\/verge\/diddestroydispatcherlog","title":"DidDestroyDispatcherLog","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/middleware\/init(_:)","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/verge\/edge\/middleware\/init(onset:)","title":"init(onSet: (inout Value) -> Void)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/middleware\/assert(_:_:)","title":"static func assert((Value) -> Bool, String?) -> Edge<Value>.Middleware","type":"method"},{"path":"\/documentation\/verge\/edge\/middleware\/do(_:)","title":"static func `do`((Value) -> Void) -> Edge<Value>.Middleware","type":"method"},{"path":"\/documentation\/verge\/edge\/middleware\/empty()","title":"static func empty() -> Edge<Value>.Middleware","type":"method"}],"path":"\/documentation\/verge\/edge\/middleware","title":"Edge.Middleware","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/==(_:_:)-2l4h2","title":"static func == (Edge<Value>, Edge<Value>) -> Bool","type":"op"},{"path":"\/documentation\/verge\/edge\/==(_:_:)-v891","title":"static func == (Edge<Value>, Edge<Value>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:)-1j24g","title":"init<S1, S2>(wrappedValue: (S1, S2), middleware: Edge<Value>.Middleware?)","type":"init"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:)-2oi05","title":"init<S1, S2, S3>(wrappedValue: (S1, S2, S3), middleware: Edge<Value>.Middleware?)","type":"init"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:)-5m3bs","title":"init<S1, S2, S3, S4, S5, S6>(wrappedValue: (S1, S2, S3, S4, S5, S6), middleware: Edge<Value>.Middleware?)","type":"init"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:)-6mlhh","title":"init(wrappedValue: (Value), middleware: Edge<Value>.Middleware?)","type":"init"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:)-6stlg","title":"init<S1, S2, S3, S4>(wrappedValue: (S1, S2, S3, S4), middleware: Edge<Value>.Middleware?)","type":"init"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:)-7jy6l","title":"init<S1, S2, S3, S4, S5>(wrappedValue: (S1, S2, S3, S4, S5), middleware: Edge<Value>.Middleware?)","type":"init"},{"path":"\/documentation\/verge\/edge\/init(wrappedvalue:middleware:comparer:)","title":"init(wrappedValue: Value, middleware: Edge<Value>.Middleware?, comparer: (Value, Value) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/counter","title":"var counter: NonAtomicCounter","type":"property"},{"path":"\/documentation\/verge\/edge\/globalid","title":"let globalID: Int","type":"property"},{"path":"\/documentation\/verge\/edge\/projectedvalue","title":"var projectedValue: Edge<Value>","type":"property"},{"path":"\/documentation\/verge\/edge\/version","title":"var version: UInt64","type":"property"},{"path":"\/documentation\/verge\/edge\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/next(_:)","title":"func next(Value) -> Edge<Value>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/subscript(dynamicmember:)-5upwu","title":"subscript<U>(dynamicMember _: WritableKeyPath<Value, U>) -> U","type":"subscript"},{"path":"\/documentation\/verge\/edge\/subscript(dynamicmember:)-85e74","title":"subscript<U>(dynamicMember _: KeyPath<Value, U?>) -> U?","type":"subscript"},{"path":"\/documentation\/verge\/edge\/subscript(dynamicmember:)-93okf","title":"subscript<U>(dynamicMember _: WritableKeyPath<Value, U?>) -> U?","type":"subscript"},{"path":"\/documentation\/verge\/edge\/subscript(dynamicmember:)-9we3r","title":"subscript<U>(dynamicMember _: KeyPath<Value, U>) -> U","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/edge\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/edge\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/edge","title":"Edge","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/indexed\/init(indexkeyselector:)","title":"init(indexKeySelector: (Element) -> IndexKey)","type":"init"},{"path":"\/documentation\/verge\/indexed\/init(indexkeyselector:initialelements:)","title":"init<C>(indexKeySelector: (Element) -> IndexKey, initialElements: C)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/indexed\/innertable","title":"var innerTable: [IndexKey : Element]","type":"property"},{"path":"\/documentation\/verge\/indexed\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/indexed\/add(_:)-12b90","title":"func add(Element)","type":"method"},{"path":"\/documentation\/verge\/indexed\/add(_:)-5qpny","title":"func add<C>(C)","type":"method"},{"path":"\/documentation\/verge\/indexed\/remove(_:)","title":"func remove(Element)","type":"method"},{"path":"\/documentation\/verge\/indexed\/remove(forkey:)","title":"func remove(forKey: IndexKey)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/verge\/indexed\/subscript(_:)","title":"subscript(IndexKey) -> Element?","type":"subscript"}],"path":"\/documentation\/verge\/indexed","title":"Indexed","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/mutationtrace\/==(_:_:)","title":"static func == (MutationTrace, MutationTrace) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/mutationtrace\/init(name:file:function:line:)","title":"init(name: String, file: StaticString, function: StaticString, line: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/mutationtrace\/createdat","title":"let createdAt: Date","type":"property"},{"path":"\/documentation\/verge\/mutationtrace\/file","title":"let file: StaticString","type":"property"},{"path":"\/documentation\/verge\/mutationtrace\/function","title":"let function: StaticString","type":"property"},{"path":"\/documentation\/verge\/mutationtrace\/line","title":"let line: UInt","type":"property"},{"path":"\/documentation\/verge\/mutationtrace\/name","title":"let name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/mutationtrace\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/mutationtrace\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/mutationtrace","title":"MutationTrace","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/nonatomiccounter\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/nonatomiccounter\/value","title":"var value: UInt64","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/nonatomiccounter\/increment()","title":"func increment()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/nonatomiccounter\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/nonatomiccounter\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/nonatomiccounter","title":"NonAtomicCounter","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelineintermediate\/==(_:_:)-3scbl","title":"static func == (PipelineIntermediate<T>, PipelineIntermediate<T>) -> Bool","type":"op"},{"path":"\/documentation\/verge\/pipelineintermediate\/==(_:_:)-7gse2","title":"static func == (PipelineIntermediate<T>, PipelineIntermediate<T>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelineintermediate\/init(value:)","title":"init(value: T)","type":"init"},{"path":"\/documentation\/verge\/pipelineintermediate\/init(value:comparer:)","title":"init(value: T, comparer: (T, T) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelineintermediate\/comparer","title":"let comparer: ((T, T) -> Bool)","type":"property"},{"path":"\/documentation\/verge\/pipelineintermediate\/value","title":"var value: T","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelineintermediate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/pipelineintermediate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/pipelineintermediate","title":"PipelineIntermediate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/statereader\/init(_:_:content:)","title":"init<Store, Pipeline>(Store, Pipeline, content: (Changes<Value>) -> Content)","type":"init"},{"path":"\/documentation\/verge\/statereader\/init(_:content:)-73nw","title":"init<Store>(Store, content: (Changes<Store.State>) -> Content)","type":"init"},{"path":"\/documentation\/verge\/statereader\/init(_:content:)-77rh","title":"init<Derived>(Derived, content: (Changes<Derived.Value>) -> Content)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/statereader\/body","title":"var body: some View","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accentcolor(_:)","title":"func accentColor(Color?) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(activationpoint:)-1srpk","title":"func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(activationpoint:)-6843a","title":"func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(addtraits:)","title":"func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(hidden:)","title":"func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(hint:)","title":"func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(identifier:)","title":"func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(inputlabels:)","title":"func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(label:)","title":"func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(removetraits:)","title":"func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibility(selectionidentifier:)","title":"func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(sortpriority:)","title":"func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/accessibility(value:)","title":"func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityaction(_:_:)","title":"func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityaction(action:label:)","title":"func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityaction(named:_:)-1598p","title":"func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityaction(named:_:)-6dh2z","title":"func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityaction(named:_:)-80eud","title":"func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityactivationpoint(_:)-2i7vk","title":"func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityactivationpoint(_:)-6p0p9","title":"func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityaddtraits(_:)","title":"func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityadjustableaction(_:)","title":"func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitychartdescriptor(_:)","title":"func accessibilityChartDescriptor<R>(R) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitychildren(children:)","title":"func accessibilityChildren<V>(children: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-1urk6","title":"func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-462kq","title":"func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-47nbl","title":"func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-4pcuo","title":"func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-7thq2","title":"func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-8dfwv","title":"func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-8fj2r","title":"func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitycustomcontent(_:_:importance:)-8iimu","title":"func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityelement(children:)","title":"func accessibilityElement(children: AccessibilityChildBehavior) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityfocused(_:)","title":"func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityfocused(_:equals:)","title":"func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityheading(_:)","title":"func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityhidden(_:)","title":"func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityhint(_:)-1hfod","title":"func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityhint(_:)-3qwmf","title":"func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityhint(_:)-4rdgh","title":"func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityidentifier(_:)","title":"func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityignoresinvertcolors(_:)","title":"func accessibilityIgnoresInvertColors(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityinputlabels(_:)-1au0o","title":"func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityinputlabels(_:)-6kmb5","title":"func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityinputlabels(_:)-9yclr","title":"func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitylabel(_:)-3yu06","title":"func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitylabel(_:)-4lgnr","title":"func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitylabel(_:)-8tfrk","title":"func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitylabeledpair(role:id:in:)","title":"func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitylinkedgroup(id:in:)","title":"func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityremovetraits(_:)","title":"func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrepresentation(representation:)","title":"func accessibilityRepresentation<V>(representation: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrespondstouserinteraction(_:)","title":"func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:)-1mnsi","title":"func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:)-781eb","title":"func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:)-9p357","title":"func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:)-g51e","title":"func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entryid:entrylabel:)-1ult3","title":"func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entryid:entrylabel:)-41z24","title":"func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entryid:entrylabel:)-8kq1g","title":"func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entryid:entrylabel:)-na6q","title":"func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entrylabel:)-20zmq","title":"func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entrylabel:)-7mmhy","title":"func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entrylabel:)-7o1t3","title":"func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:entries:entrylabel:)-xdmd","title":"func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:textranges:)-3j4zf","title":"func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:textranges:)-4g4wn","title":"func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:textranges:)-5s9h8","title":"func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotor(_:textranges:)-bn1o","title":"func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityrotorentry(id:in:)","title":"func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityscrollaction(_:)","title":"func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityshowslargecontentviewer()","title":"func accessibilityShowsLargeContentViewer() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityshowslargecontentviewer(_:)","title":"func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitysortpriority(_:)","title":"func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilitytextcontenttype(_:)","title":"func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityvalue(_:)-36szg","title":"func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityvalue(_:)-3dy2z","title":"func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/accessibilityvalue(_:)-6o9xu","title":"func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:actions:)-5jlgh","title":"func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:actions:)-6mexg","title":"func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:actions:)-77z74","title":"func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:actions:message:)-4rz5v","title":"func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:actions:message:)-4y0vg","title":"func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:actions:message:)-8xyrs","title":"func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:presenting:actions:)-29tvl","title":"func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:presenting:actions:)-79v8h","title":"func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:presenting:actions:)-8ww6h","title":"func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:presenting:actions:message:)-113rr","title":"func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:presenting:actions:message:)-1zull","title":"func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(_:ispresented:presenting:actions:message:)-7pssn","title":"func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/alert(ispresented:content:)","title":"func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(ispresented:error:actions:)","title":"func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alert(ispresented:error:actions:message:)","title":"func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/alert(item:content:)","title":"func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alignmentguide(_:computevalue:)-6j5rn","title":"func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/alignmentguide(_:computevalue:)-6yy3e","title":"func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/allowshittesting(_:)","title":"func allowsHitTesting(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/allowstightening(_:)","title":"func allowsTightening(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/anchorpreference(key:value:transform:)","title":"func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/animation(_:)","title":"func animation(Animation?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/animation(_:value:)","title":"func animation<V>(Animation?, value: V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/aspectratio(_:contentmode:)-1noy5","title":"func aspectRatio(CGSize, contentMode: ContentMode) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/aspectratio(_:contentmode:)-5zhm5","title":"func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/background(_:alignment:)","title":"func background<Background>(Background, alignment: Alignment) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(_:ignoressafeareaedges:)","title":"func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(_:in:fillstyle:)-7hzlg","title":"func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(_:in:fillstyle:)-8pw4t","title":"func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(alignment:content:)","title":"func background<V>(alignment: Alignment, content: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(ignoressafeareaedges:)","title":"func background(ignoresSafeAreaEdges: Edge.Set) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(in:fillstyle:)-1e4h1","title":"func background<S>(in: S, fillStyle: FillStyle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/background(in:fillstyle:)-24hho","title":"func background<S>(in: S, fillStyle: FillStyle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/backgroundpreferencevalue(_:_:)","title":"func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/badge(_:)-2h1kc","title":"func badge(LocalizedStringKey?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/badge(_:)-4v4p7","title":"func badge<S>(S?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/badge(_:)-4xacw","title":"func badge(Text?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/badge(_:)-6ekhc","title":"func badge(Int) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/blendmode(_:)","title":"func blendMode(BlendMode) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/blur(radius:opaque:)","title":"func blur(radius: CGFloat, opaque: Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/border(_:width:)","title":"func border<S>(S, width: CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/brightness(_:)","title":"func brightness(Double) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/buttonbordershape(_:)","title":"func buttonBorderShape(ButtonBorderShape) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/buttonstyle(_:)-3zo1k","title":"func buttonStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/buttonstyle(_:)-zvae","title":"func buttonStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/clipshape(_:style:)","title":"func clipShape<S>(S, style: FillStyle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/clipped(antialiased:)","title":"func clipped(antialiased: Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/colorinvert()","title":"func colorInvert() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/colormultiply(_:)","title":"func colorMultiply(Color) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/colorscheme(_:)","title":"func colorScheme(ColorScheme) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/compositinggroup()","title":"func compositingGroup() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:actions:)-15pii","title":"func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:actions:)-281km","title":"func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5gbda","title":"func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-14dzy","title":"func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6qifw","title":"func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9pxo9","title":"func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-448f2","title":"func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-51z6r","title":"func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-xel8","title":"func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6yupb","title":"func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8fb12","title":"func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9khbr","title":"func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/containershape(_:)","title":"func containerShape<T>(T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/contentshape(_:_:eofill:)","title":"func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/contentshape(_:eofill:)","title":"func contentShape<S>(S, eoFill: Bool) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/contextmenu(_:)","title":"func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/contextmenu(menuitems:)","title":"func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/contrast(_:)","title":"func contrast(Double) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/controlgroupstyle(_:)","title":"func controlGroupStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/controlsize(_:)","title":"func controlSize(ControlSize) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/coordinatespace(name:)","title":"func coordinateSpace<T>(name: T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/cornerradius(_:antialiased:)","title":"func cornerRadius(CGFloat, antialiased: Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/datepickerstyle(_:)","title":"func datePickerStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/defaultappstorage(_:)","title":"func defaultAppStorage(UserDefaults) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/deletedisabled(_:)","title":"func deleteDisabled(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/disableautocorrection(_:)","title":"func disableAutocorrection(Bool?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/disabled(_:)","title":"func disabled(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/drawinggroup(opaque:colormode:)","title":"func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/dynamictypesize(_:)","title":"func dynamicTypeSize(DynamicTypeSize) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/edgesignoringsafearea(_:)","title":"func edgesIgnoringSafeArea(Edge.Set) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/environment(_:_:)","title":"func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/environmentobject(_:)","title":"func environmentObject<T>(T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/exportsitemproviders(_:onexport:)","title":"func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/exportsitemproviders(_:onexport:onedit:)","title":"func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6j7n","title":"func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8gq4e","title":"func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1srqx","title":"func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fileexporter(ispresented:documents:contenttype:oncompletion:)-49ptl","title":"func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)","title":"func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)","title":"func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/filemover(ispresented:file:oncompletion:)","title":"func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/filemover(ispresented:files:oncompletion:)","title":"func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fixedsize()","title":"func fixedSize() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/fixedsize(horizontal:vertical:)","title":"func fixedSize(horizontal: Bool, vertical: Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/flipsforrighttoleftlayoutdirection(_:)","title":"func flipsForRightToLeftLayoutDirection(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/focusscope(_:)","title":"func focusScope(Namespace.ID) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/focusable(_:)","title":"func focusable(Bool) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/focusable(_:onfocuschange:)","title":"func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/focused(_:)","title":"func focused(FocusState<Bool>.Binding) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/focused(_:equals:)","title":"func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/focusedscenevalue(_:_:)","title":"func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/focusedvalue(_:_:)","title":"func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/font(_:)","title":"func font(Font?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/foregroundcolor(_:)","title":"func foregroundColor(Color?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/foregroundstyle(_:)","title":"func foregroundStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/foregroundstyle(_:_:)","title":"func foregroundStyle<S1, S2>(S1, S2) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/foregroundstyle(_:_:_:)","title":"func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/frame()","title":"func frame() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)","title":"func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/frame(width:height:alignment:)","title":"func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/gesture(_:including:)","title":"func gesture<T>(T, including: GestureMask) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/grayscale(_:)","title":"func grayscale(Double) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/groupboxstyle(_:)","title":"func groupBoxStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/handlesexternalevents(preferring:allowing:)","title":"func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/headerprominence(_:)","title":"func headerProminence(Prominence) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/help(_:)-177a","title":"func help<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/help(_:)-6onmi","title":"func help(LocalizedStringKey) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/help(_:)-6rv3s","title":"func help(Text) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/hidden()","title":"func hidden() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/highprioritygesture(_:including:)","title":"func highPriorityGesture<T>(T, including: GestureMask) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/horizontalradiogrouplayout()","title":"func horizontalRadioGroupLayout() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/huerotation(_:)","title":"func hueRotation(Angle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/id(_:)","title":"func id<ID>(ID) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ignoressafearea(_:edges:)","title":"func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/imagescale(_:)","title":"func imageScale(Image.Scale) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/importsitemproviders(_:onimport:)","title":"func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/interactivedismissdisabled(_:)","title":"func interactiveDismissDisabled(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/itemprovider(_:)","title":"func itemProvider(Optional<() -> NSItemProvider?>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/keyboardshortcut(_:)-32hvv","title":"func keyboardShortcut(KeyboardShortcut) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/keyboardshortcut(_:)-6re83","title":"func keyboardShortcut(KeyboardShortcut?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/keyboardshortcut(_:modifiers:)","title":"func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/keyboardshortcut(_:modifiers:localization:)","title":"func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/labelstyle(_:)","title":"func labelStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/labelshidden()","title":"func labelsHidden() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/layoutpriority(_:)","title":"func layoutPriority(Double) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/linelimit(_:)","title":"func lineLimit(Int?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/linespacing(_:)","title":"func lineSpacing(CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/listitemtint(_:)-1xilm","title":"func listItemTint(Color?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/listitemtint(_:)-898xz","title":"func listItemTint(ListItemTint?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/listrowbackground(_:)","title":"func listRowBackground<V>(V?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/listrowinsets(_:)","title":"func listRowInsets(EdgeInsets?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/liststyle(_:)","title":"func listStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/luminancetoalpha()","title":"func luminanceToAlpha() -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/mask(_:)","title":"func mask<Mask>(Mask) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/mask(alignment:_:)","title":"func mask<Mask>(alignment: Alignment, () -> Mask) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/matchedgeometryeffect(id:in:properties:anchor:issource:)","title":"func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/menubuttonstyle(_:)","title":"func menuButtonStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/menuindicator(_:)","title":"func menuIndicator(Visibility) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/menustyle(_:)","title":"func menuStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/minimumscalefactor(_:)","title":"func minimumScaleFactor(CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/modifier(_:)","title":"func modifier<T>(T) -> ModifiedContent<Self, T>","type":"method"},{"path":"\/documentation\/verge\/statereader\/monospaceddigit()","title":"func monospacedDigit() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/movedisabled(_:)","title":"func moveDisabled(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/multilinetextalignment(_:)","title":"func multilineTextAlignment(TextAlignment) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationsubtitle(_:)-3c47z","title":"func navigationSubtitle(Text) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationsubtitle(_:)-61zbj","title":"func navigationSubtitle(LocalizedStringKey) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationsubtitle(_:)-7hmhv","title":"func navigationSubtitle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationtitle(_:)-1dpts","title":"func navigationTitle(LocalizedStringKey) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationtitle(_:)-2h2w8","title":"func navigationTitle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationtitle(_:)-35z24","title":"func navigationTitle(Text) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationtitle(_:)-5duwg","title":"func navigationTitle<V>(() -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/navigationviewstyle(_:)","title":"func navigationViewStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/offset(_:)","title":"func offset(CGSize) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/offset(x:y:)","title":"func offset(x: CGFloat, y: CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onappear(perform:)","title":"func onAppear(perform: (() -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onchange(of:perform:)","title":"func onChange<V>(of: V, perform: (V) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/oncommand(_:perform:)","title":"func onCommand(Selector, perform: (() -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/oncontinueuseractivity(_:perform:)","title":"func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/oncopycommand(perform:)","title":"func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/oncutcommand(perform:)","title":"func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondeletecommand(perform:)","title":"func onDeleteCommand(perform: (() -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondisappear(perform:)","title":"func onDisappear(perform: (() -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondrag(_:)","title":"func onDrag(() -> NSItemProvider) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondrag(_:preview:)","title":"func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondrop(of:delegate:)-7ocmx","title":"func onDrop(of: [UTType], delegate: DropDelegate) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/ondrop(of:delegate:)-915y7","title":"func onDrop(of: [String], delegate: DropDelegate) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondrop(of:istargeted:perform:)-5droy","title":"func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/ondrop(of:istargeted:perform:)-6dlw","title":"func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/ondrop(of:istargeted:perform:)-6dpsh","title":"func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ondrop(of:istargeted:perform:)-6zk4x","title":"func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onexitcommand(perform:)","title":"func onExitCommand(perform: (() -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onhover(perform:)","title":"func onHover(perform: (Bool) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)","title":"func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)","title":"func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onlongpressgesture(minimumduration:perform:onpressingchanged:)","title":"func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/onlongpressgesture(minimumduration:pressing:perform:)","title":"func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onmovecommand(perform:)","title":"func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onopenurl(perform:)","title":"func onOpenURL(perform: (URL) -> ()) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onpastecommand(of:perform:)-706h9","title":"func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/onpastecommand(of:perform:)-9vb8h","title":"func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/onpastecommand(of:validator:perform:)-4192g","title":"func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onpastecommand(of:validator:perform:)-4tzpc","title":"func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onplaypausecommand(perform:)","title":"func onPlayPauseCommand(perform: (() -> Void)?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onpreferencechange(_:perform:)","title":"func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onreceive(_:perform:)","title":"func onReceive<P>(P, perform: (P.Output) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/onsubmit(of:_:)","title":"func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/ontapgesture(count:perform:)","title":"func onTapGesture(count: Int, perform: () -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/opacity(_:)","title":"func opacity(Double) -> some View","type":"method"},{"deprecated":true,"path":"\/documentation\/verge\/statereader\/overlay(_:alignment:)","title":"func overlay<Overlay>(Overlay, alignment: Alignment) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/overlay(_:ignoressafeareaedges:)","title":"func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/overlay(_:in:fillstyle:)","title":"func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/overlay(alignment:content:)","title":"func overlay<V>(alignment: Alignment, content: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/overlaypreferencevalue(_:_:)","title":"func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/padding(_:)-5dsh5","title":"func padding(CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/padding(_:)-gzj4","title":"func padding(EdgeInsets) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/padding(_:_:)","title":"func padding(Edge.Set, CGFloat?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/pagecommand(value:in:step:)","title":"func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/pickerstyle(_:)","title":"func pickerStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/popover(ispresented:attachmentanchor:arrowedge:content:)","title":"func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/popover(item:attachmentanchor:arrowedge:content:)","title":"func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/position(_:)","title":"func position(CGPoint) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/position(x:y:)","title":"func position(x: CGFloat, y: CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/preference(key:value:)","title":"func preference<K>(key: K.Type, value: K.Value) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/preferredcolorscheme(_:)","title":"func preferredColorScheme(ColorScheme?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/prefersdefaultfocus(_:in:)","title":"func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/presentedwindowstyle(_:)","title":"func presentedWindowStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/presentedwindowtoolbarstyle(_:)","title":"func presentedWindowToolbarStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/previewcontext(_:)","title":"func previewContext<C>(C) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/previewdevice(_:)","title":"func previewDevice(PreviewDevice?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/previewdisplayname(_:)","title":"func previewDisplayName(String?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/previewinterfaceorientation(_:)","title":"func previewInterfaceOrientation(InterfaceOrientation) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/previewlayout(_:)","title":"func previewLayout(PreviewLayout) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/privacysensitive(_:)","title":"func privacySensitive(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/progressviewstyle(_:)","title":"func progressViewStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/projectioneffect(_:)","title":"func projectionEffect(ProjectionTransform) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/redacted(reason:)","title":"func redacted(reason: RedactionReasons) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/refreshable(action:)","title":"func refreshable(action: () async -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/rotation3deffect(_:axis:anchor:anchorz:perspective:)","title":"func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/rotationeffect(_:anchor:)","title":"func rotationEffect(Angle, anchor: UnitPoint) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/safeareainset(edge:alignment:spacing:content:)-4gbxd","title":"func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/safeareainset(edge:alignment:spacing:content:)-8zvjb","title":"func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/saturation(_:)","title":"func saturation(Double) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/scaleeffect(_:anchor:)-2rylj","title":"func scaleEffect(CGFloat, anchor: UnitPoint) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/scaleeffect(_:anchor:)-9d8gb","title":"func scaleEffect(CGSize, anchor: UnitPoint) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/scaleeffect(x:y:anchor:)","title":"func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/scaledtofill()","title":"func scaledToFill() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/scaledtofit()","title":"func scaledToFit() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/scenepadding(_:)","title":"func scenePadding(Edge.Set) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchcompletion(_:)","title":"func searchCompletion(String) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchable(text:placement:prompt:)-1aro7","title":"func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchable(text:placement:prompt:)-2ao3p","title":"func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchable(text:placement:prompt:)-d7ue","title":"func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchable(text:placement:prompt:suggestions:)-1ffzu","title":"func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchable(text:placement:prompt:suggestions:)-5o8g5","title":"func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/searchable(text:placement:prompt:suggestions:)-8o8sy","title":"func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/shadow(color:radius:x:y:)","title":"func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/sheet(ispresented:ondismiss:content:)","title":"func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/sheet(item:ondismiss:content:)","title":"func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/simultaneousgesture(_:including:)","title":"func simultaneousGesture<T>(T, including: GestureMask) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/speechadjustedpitch(_:)","title":"func speechAdjustedPitch(Double) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/speechalwaysincludespunctuation(_:)","title":"func speechAlwaysIncludesPunctuation(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/speechannouncementsqueued(_:)","title":"func speechAnnouncementsQueued(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/speechspellsoutcharacters(_:)","title":"func speechSpellsOutCharacters(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/submitlabel(_:)","title":"func submitLabel(SubmitLabel) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/submitscope(_:)","title":"func submitScope(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/swipeactions(edge:allowsfullswipe:content:)","title":"func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/symbolrenderingmode(_:)","title":"func symbolRenderingMode(SymbolRenderingMode?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/symbolvariant(_:)","title":"func symbolVariant(SymbolVariants) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/tabitem(_:)","title":"func tabItem<V>(() -> V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/tabviewstyle(_:)","title":"func tabViewStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/tablestyle(_:)","title":"func tableStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/tag(_:)","title":"func tag<V>(V) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/task(id:priority:_:)","title":"func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/task(priority:_:)","title":"func task(priority: TaskPriority, () async -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/textcase(_:)","title":"func textCase(Text.Case?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/textcontenttype(_:)","title":"func textContentType(NSTextContentType?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/textfieldstyle(_:)","title":"func textFieldStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/textselection(_:)","title":"func textSelection<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/tint(_:)","title":"func tint(Color?) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/togglestyle(_:)","title":"func toggleStyle<S>(S) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/toolbar(content:)-4cc7e","title":"func toolbar<Content>(content: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/toolbar(content:)-5kaue","title":"func toolbar<Content>(content: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/toolbar(id:content:)","title":"func toolbar<Content>(id: String, content: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/touchbar(_:)","title":"func touchBar<Content>(TouchBar<Content>) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/touchbar(content:)","title":"func touchBar<Content>(content: () -> Content) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/touchbarcustomizationlabel(_:)","title":"func touchBarCustomizationLabel(Text) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/touchbaritempresence(_:)","title":"func touchBarItemPresence(TouchBarItemPresence) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/touchbaritemprincipal(_:)","title":"func touchBarItemPrincipal(Bool) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/transaction(_:)","title":"func transaction((inout Transaction) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/transformanchorpreference(key:value:transform:)","title":"func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/transformeffect(_:)","title":"func transformEffect(CGAffineTransform) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/transformenvironment(_:transform:)","title":"func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/transformpreference(_:_:)","title":"func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/transition(_:)","title":"func transition(AnyTransition) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/truncationmode(_:)","title":"func truncationMode(Text.TruncationMode) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/unredacted()","title":"func unredacted() -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/useractivity(_:element:_:)","title":"func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/useractivity(_:isactive:_:)","title":"func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View","type":"method"},{"path":"\/documentation\/verge\/statereader\/zindex(_:)","title":"func zIndex(Double) -> some View","type":"method"}],"path":"\/documentation\/verge\/statereader\/view-implementations","title":"View Implementations","type":"symbol"}],"path":"\/documentation\/verge\/statereader","title":"StateReader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanyrecursivelock\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeanyrecursivelock\/lock()","title":"func lock()","type":"method"},{"path":"\/documentation\/verge\/vergeanyrecursivelock\/unlock()","title":"func unlock()","type":"method"}],"path":"\/documentation\/verge\/vergeanyrecursivelock","title":"VergeAnyRecursiveLock","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergenolock\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergenolock\/lock()","title":"func lock()","type":"method"},{"path":"\/documentation\/verge\/vergenolock\/unlock()","title":"func unlock()","type":"method"}],"path":"\/documentation\/verge\/vergenolock","title":"VergeNoLock","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergesignposttransaction\/init(_:)","title":"init(StaticString)","type":"init"},{"path":"\/documentation\/verge\/vergesignposttransaction\/init(_:label:)","title":"init(StaticString, label: () -> String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/vergesignposttransaction\/rawid","title":"let rawID: os_signpost_id_t","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergesignposttransaction\/end()","title":"func end()","type":"method"},{"path":"\/documentation\/verge\/vergesignposttransaction\/event(name:)","title":"func event(name: StaticString)","type":"method"},{"path":"\/documentation\/verge\/vergesignposttransaction\/event(name:label:)","title":"func event(name: StaticString, label: () -> String)","type":"method"}],"path":"\/documentation\/verge\/vergesignposttransaction","title":"VergeSignpostTransaction","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/verge\/vergesignpostevent(_:)","title":"func vergeSignpostEvent(StaticString)","type":"func"},{"path":"\/documentation\/verge\/vergesignpostevent(_:label:)","title":"func vergeSignpostEvent(StaticString, label: () -> String)","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/fragment","title":"Fragment","type":"typealias"},{"path":"\/documentation\/verge\/fragmenttype","title":"FragmentType","type":"typealias"},{"path":"\/documentation\/verge\/noactivitystorebase","title":"NoActivityStoreBase","type":"typealias"},{"path":"\/documentation\/verge\/storewrappertype","title":"StoreWrapperType","type":"typealias"},{"path":"\/documentation\/verge\/vergeanycancellables","title":"VergeAnyCancellables","type":"typealias"},{"path":"\/documentation\/verge\/viewmodelbase","title":"ViewModelBase","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/continuousresult\/new(_:)","title":"case new(Output)","type":"case"},{"path":"\/documentation\/verge\/continuousresult\/noupdates","title":"case noUpdates","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/continuousresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/continuousresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/continuousresult","title":"ContinuousResult","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:)-5byyo","title":"static func buildBlock<S1>(S1) -> PipelineIntermediate<S1>","type":"method"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:)-h0tj","title":"static func buildBlock<IntermediateValue>(PipelineIntermediate<IntermediateValue>) -> PipelineIntermediate<IntermediateValue>","type":"method"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:_:)","title":"static func buildBlock<S1, S2>(S1, S2) -> PipelineIntermediate<(S1, S2)>","type":"method"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:_:_:)","title":"static func buildBlock<S1, S2, S3>(S1, S2, S3) -> PipelineIntermediate<(S1, S2, S3)>","type":"method"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:_:_:_:)","title":"static func buildBlock<S1, S2, S3, S4>(S1, S2, S3, S4) -> PipelineIntermediate<(S1, S2, S3, S4)>","type":"method"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:_:_:_:_:)","title":"static func buildBlock<S1, S2, S3, S4, S5>(S1, S2, S3, S4, S5) -> PipelineIntermediate<(S1, S2, S3, S4, S5)>","type":"method"},{"path":"\/documentation\/verge\/pipelineintermediatebuilder\/buildblock(_:_:_:_:_:_:)","title":"static func buildBlock<S1, S2, S3, S4, S5, S6>(S1, S2, S3, S4, S5, S6) -> PipelineIntermediate<(S1, S2, S3, S4, S5, S6)>","type":"method"}],"path":"\/documentation\/verge\/pipelineintermediatebuilder","title":"PipelineIntermediateBuilder","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/init(map:additionaldropcondition:)","title":"init(map: (Input) -> Output, additionalDropCondition: ((Input) -> Bool)?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/additionaldropcondition","title":"let additionalDropCondition: ((Input) -> Bool)?","type":"property"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/map","title":"let map: (Input) -> Output","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/drop(while:)","title":"func drop(while: (Input) -> Bool) -> Pipelines.BasicMapPipeline<Input, Output>","type":"method"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/yield(_:)","title":"func yield(Input) -> Output","type":"method"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/yieldcontinuously(_:)","title":"func yieldContinuously(Input) -> ContinuousResult<Output>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/map(_:)-729vz","title":"static func map<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/map(_:)-ky7a","title":"static func map<Input, Output>((Changes<Input>) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/map(using:)","title":"static func map<Input, EdgeIntermediate>(using: (Changes<Input>) -> PipelineIntermediate<Edge<EdgeIntermediate>>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/map(using:transform:)","title":"static func map<Input, Intermediate, Output>(using: (Changes<Input>) -> PipelineIntermediate<Intermediate>, transform: (Intermediate) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/select(_:)","title":"static func select<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"}],"path":"\/documentation\/verge\/pipelines\/basicmappipeline\/pipelinetype-implementations","title":"PipelineType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/pipelines\/basicmappipeline","title":"Pipelines.BasicMapPipeline","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/init(intermediate:transform:additionaldropcondition:)","title":"init(intermediate: (Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> PipelineIntermediate<Intermediate>, transform: (Intermediate) -> Output, additionalDropCondition: ((Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> Bool)?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/additionaldropcondition","title":"let additionalDropCondition: ((Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> Bool)?","type":"property"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/intermediate","title":"let intermediate: (Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> PipelineIntermediate<Intermediate>","type":"property"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/transform","title":"let transform: (Intermediate) -> Output","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/drop(while:)","title":"func drop(while: (Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> Bool) -> Pipelines.ChangesMapPipeline<Source, Intermediate, Output>","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/yield(_:)","title":"func yield(Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> Output","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/yieldcontinuously(_:)","title":"func yieldContinuously(Pipelines.ChangesMapPipeline<Source, Intermediate, Output>.Input) -> ContinuousResult<Output>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/input","title":"Pipelines.ChangesMapPipeline.Input","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/map(_:)-18532","title":"static func map<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/map(_:)-80qq9","title":"static func map<Input, Output>((Changes<Input>) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/map(using:)","title":"static func map<Input, EdgeIntermediate>(using: (Changes<Input>) -> PipelineIntermediate<Edge<EdgeIntermediate>>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/map(using:transform:)","title":"static func map<Input, Intermediate, Output>(using: (Changes<Input>) -> PipelineIntermediate<Intermediate>, transform: (Intermediate) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/select(_:)","title":"static func select<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"}],"path":"\/documentation\/verge\/pipelines\/changesmappipeline\/pipelinetype-implementations","title":"PipelineType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/pipelines\/changesmappipeline","title":"Pipelines.ChangesMapPipeline","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/init(keypath:additionaldropcondition:)","title":"init(keyPath: KeyPath<Pipelines.ChangesSelectPipeline<Source, Output>.Input, Output>, additionalDropCondition: ((Pipelines.ChangesSelectPipeline<Source, Output>.Input) -> Bool)?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/additionaldropcondition","title":"let additionalDropCondition: ((Pipelines.ChangesSelectPipeline<Source, Output>.Input) -> Bool)?","type":"property"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/keypath","title":"let keyPath: KeyPath<Pipelines.ChangesSelectPipeline<Source, Output>.Input, Output>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/drop(while:)","title":"func drop(while: (Pipelines.ChangesSelectPipeline<Source, Output>.Input) -> Bool) -> Pipelines.ChangesSelectPipeline<Source, Output>","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/yield(_:)","title":"func yield(Pipelines.ChangesSelectPipeline<Source, Output>.Input) -> Output","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/yieldcontinuously(_:)","title":"func yieldContinuously(Pipelines.ChangesSelectPipeline<Source, Output>.Input) -> ContinuousResult<Output>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/input","title":"Pipelines.ChangesSelectPipeline.Input","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/map(_:)-1j43g","title":"static func map<Input, Output>((Changes<Input>) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/map(_:)-6nrcm","title":"static func map<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/map(using:)","title":"static func map<Input, EdgeIntermediate>(using: (Changes<Input>) -> PipelineIntermediate<Edge<EdgeIntermediate>>) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/map(using:transform:)","title":"static func map<Input, Intermediate, Output>(using: (Changes<Input>) -> PipelineIntermediate<Intermediate>, transform: (Intermediate) -> Output) -> Self","type":"method"},{"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/select(_:)","title":"static func select<Input, Output>(KeyPath<Changes<Input>, Output>) -> Self","type":"method"}],"path":"\/documentation\/verge\/pipelines\/changesselectpipeline\/pipelinetype-implementations","title":"PipelineType Implementations","type":"symbol"}],"path":"\/documentation\/verge\/pipelines\/changesselectpipeline","title":"Pipelines.ChangesSelectPipeline","type":"struct"}],"path":"\/documentation\/verge\/pipelines","title":"Pipelines","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/runtimeerror\/recoveredstatefromreceivingolderversion(lateststate:receivedstate:)","title":"case recoveredStateFromReceivingOlderVersion(latestState: AnyChangesType, receivedState: AnyChangesType)","type":"case"},{"path":"\/documentation\/verge\/runtimeerror\/recursiveleycommit(storename:traces:)","title":"case recursiveleyCommit(storeName: String, traces: [MutationTrace])","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/runtimeerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/verge\/runtimeerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/verge\/runtimeerror","title":"RuntimeError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/stateupdatingerror\/targetwasnull","title":"case targetWasNull","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/stateupdatingerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/stateupdatingerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/stateupdatingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/verge\/stateupdatingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/verge\/stateupdatingerror","title":"StateUpdatingError","type":"enum"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/init(initialvalue:)","title":"init(initialValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/value","title":"var value: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/compareandset(expect:newvalue:)","title":"func compareAndSet(expect: Int, newValue: Int) -> Bool","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/decrementandget()","title":"func decrementAndGet() -> Int","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/getanddecrement()","title":"func getAndDecrement() -> Int","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/getandincrement()","title":"func getAndIncrement() -> Int","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/getandset(newvalue:)","title":"func getAndSet(newValue: Int) -> Int","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicint\/incrementandget()","title":"func incrementAndGet() -> Int","type":"method"}],"path":"\/documentation\/verge\/vergeconcurrency\/atomicint","title":"VergeConcurrency.AtomicInt","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicreference\/init(initialvalue:)","title":"init(initialValue: ValueType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicreference\/value","title":"var value: ValueType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicreference\/compareandset(expect:newvalue:)","title":"func compareAndSet(expect: ValueType, newValue: ValueType) -> Bool","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/atomicreference\/getandset(newvalue:)","title":"func getAndSet(newValue: ValueType) -> ValueType","type":"method"}],"path":"\/documentation\/verge\/vergeconcurrency\/atomicreference","title":"VergeConcurrency.AtomicReference","type":"class"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelock","title":"VergeConcurrency.RecursiveLock","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic\/unsafelywrappedvalue","title":"var unsafelyWrappedValue: Value","type":"property"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic\/modify(_:)","title":"func modify<Result>((inout Value) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic\/swap(_:)","title":"func swap(Value) -> Value","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic\/withvalue(_:)","title":"func withValue<Result>((Value) throws -> Result) rethrows -> Result","type":"method"}],"path":"\/documentation\/verge\/vergeconcurrency\/recursivelockatomic","title":"VergeConcurrency.RecursiveLockAtomic","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/init(debugonly:)","title":"init(debugOnly: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/register(_:_:_:printsconsole:)","title":"func register(StaticString, StaticString, UInt, printsConsole: Bool) -> Set<VergeConcurrency.SynchronizationTracker.Warning>","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/unregister()","title":"func unregister()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/warning\/reentrancyanomaly","title":"case reentrancyAnomaly","type":"case"},{"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/warning\/synchronizationanomaly","title":"case synchronizationAnomaly","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/warning\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/warning\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker\/warning","title":"VergeConcurrency.SynchronizationTracker.Warning","type":"enum"}],"path":"\/documentation\/verge\/vergeconcurrency\/synchronizationtracker","title":"VergeConcurrency.SynchronizationTracker","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlock\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlock\/lock()","title":"func lock()","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlock\/try()","title":"func `try`() -> Bool","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlock\/unlock()","title":"func unlock()","type":"method"}],"path":"\/documentation\/verge\/vergeconcurrency\/unfairlock","title":"VergeConcurrency.UnfairLock","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic\/unsafelywrappedvalue","title":"var unsafelyWrappedValue: Value","type":"property"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic\/modify(_:)","title":"func modify<Result>((inout Value) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic\/swap(_:)","title":"func swap(Value) -> Value","type":"method"},{"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic\/withvalue(_:)","title":"func withValue<Result>((Value) throws -> Result) rethrows -> Result","type":"method"}],"path":"\/documentation\/verge\/vergeconcurrency\/unfairlockatomic","title":"VergeConcurrency.UnfairLockAtomic","type":"class"}],"path":"\/documentation\/verge\/vergeconcurrency","title":"VergeConcurrency","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/verge\/vergeoslogs\/debuglog","title":"static let debugLog: OSLog","type":"property"}],"path":"\/documentation\/verge\/vergeoslogs","title":"VergeOSLogs","type":"enum"}],"path":"\/documentation\/verge","title":"Verge","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}